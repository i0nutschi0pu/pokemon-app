{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"@angular/router\";\nexport class PokemonCRUDService {\n  constructor(http, messageService, route) {\n    this.http = http;\n    this.messageService = messageService;\n    this.route = route;\n    this.pokemonsUrl = 'http://pokeapi.co/api/v2/pokemon/?limit=30&offset=0.';\n    this.pokemonByNameUrl = 'https://pokeapi.co/api/v2/pokemon';\n    this.list = [];\n    this.pokemoTypes = [];\n    this.bb = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  } // getPokemons(): Observable<PokemonsPayload>  {\n  //   return this.http.get<PokemonsPayload>(this.pokemonsUrl);\n  // }\n\n\n  getPokemons2() {\n    return this.http.get(this.pokemonsUrl);\n  }\n\n  getSearchedPokemon(term) {\n    if (!term.trim()) {\n      // if not search term, return empty pokemon array.\n      return;\n    }\n\n    this.http.get(`${this.pokemonByNameUrl}/${term}`).subscribe(response => {\n      // console.log(response);\n      for (const [k, v] of Object.entries(response)) {\n        if (v.name === term) {\n          // window.location.href = `${this.pokemonByNameUrl}/${term}`;\n          console.log('daaa');\n        }\n      }\n    }, catchError(this.handleError('getSearchedPokemon', [])));\n  }\n\n  getPokemonTypes() {\n    var PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n    return this.http.get(PokemonTypesUrl);\n  } //   async processPokem()\n  //   {\n  //     let result: any;\n  //     let user_list: [] = [];\n  //     for (const [key, value] of Object.entries(this.getPokemonTypes())) { \n  //         result = await this.getPokemonTypes();\n  //         // user_list.push(result);\n  //         user_list = result;\n  //     }\n  //     return user_list;\n  // }\n\n\n  getPokemonImage() {\n    // let list: string[] = [];\n    //let list: {id: number, name: string; url: string}[] = [];\n    var data = this.getPokemons2();\n    let i = 0;\n    var res = []; // console.log(this.getPokemons2());\n    //   this.getPokemons2.subscribe(\n    //     data => {\n    //         this.results = data.Results\n    //     }\n    // );\n\n    this.getPokemons2().forEach(item => {\n      //console.log(item.results[0].name);\n      //res.push(item.results);\n      item.results.forEach(childrenEntry => {\n        this.list.push({\n          id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]),\n          name: childrenEntry.name,\n          url: childrenEntry.url\n        });\n      });\n    }); // res.forEach(item2 => {\n    //   //console.log(item.results[0].name);\n    //   list.push(item2.name);\n    // });\n    //  console.log(res);\n\n    console.log(this.list); //  var dataModels = [];\n    //  dataModels[0] = {\n    //      childNodes: []\n    //  };\n    //  dataModels[0].childNodes[0] = {\n    //      appId: \"foo\"\n    //  };\n    //  dataModels.forEach(function(entry){ \n    //      entry.childNodes.forEach(function(childrenEntry) { // was missing a )\n    //        console.log(childrenEntry.appId);\n    //      });\n    //  });\n\n    return this.list;\n  } // /** GET hero by id. Will 404 if id not found */\n\n\n  getPokemon(id) {\n    const url = `${this.pokemonByNameUrl}/${id}`;\n    console.log(url);\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n\n  getPokemonIdByName(name) {\n    if (!name.trim()) {\n      // if not search term, return empty pokemon array.\n      return null;\n    }\n\n    this.http.get(`${this.pokemonByNameUrl}/${name}`).subscribe(response => {\n      // console.log(response);\n      for (const [k, v] of Object.entries(response)) {\n        if (v.name === name) {\n          // window.location.href = `${this.pokemonByNameUrl}/${term}`;\n          console.log('daaa');\n          return v.id;\n        }\n      }\n    }, catchError(this.handleError('getPokemonIdByName', [])));\n    return;\n  } // /* GET heroes whose name contains search term */\n  // searchPokemons2(term: string): any {\n  //   console.log('asaaa');\n  //   if (!term.trim()) {\n  //     // if not search term, return empty pokemon array.\n  //     return of([]);\n  //   }\n  //    console.log(`${this.pokemonByNameUrl}/${term}`);\n  //    this.http.get<Pokemon[]>(`${this.pokemonByNameUrl}/${term}`).pipe(\n  //     tap(\n  //       (x) => {\n  //         console.log('aaaaaa');\n  //         for (const [k, v] of Object.entries(x)) {\n  //           if(v.name === term){\n  //             console.log('daaaa');\n  //           // window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n  //           }else{\n  //             console.log('nuu');\n  //           }\n  //           // console.log(x['name'] === term);\n  //         }\n  //         // if(x){\n  //         //   window.location.href = 'https://pokeapi.co/api/v2/pokemon/bulbasaur';\n  //         // }else{\n  //         //   console.log('nuuuuu');\n  //         // }\n  //       }\n  //       // x.length ?\n  //       // this.log(`found pokemons matching \"${term}\"`) :\n  //       // this.log(`no pokemons matching \"${term}\"`)),\n  //     // catchError(this.handleError<Pokemon[]>('searchPokemons', []))\n  //   ));\n  //  // return 'daa';\n  // }\n\n  /* GET heroes whose name contains search term */\n\n\n  searchPokemons(term) {\n    // let results = this.http.get<Pokemon>(`https://pokeapi.co/api/v2/pokemon/bulbasaur`);\n    // results.forEach(item2 => {\n    //   console.log(item2);\n    //   // res.push(item.results);\n    //   // item.results.forEach(childrenEntry => { // was missing a )\n    //   //          list.push({name: childrenEntry.name, url: childrenEntry.url});\n    //   // });\n    // });\n    //  console.log(term);\n    console.log('asaaa');\n\n    if (!term.trim()) {\n      // if not search term, return empty pokemon array.\n      return of([]);\n    } //0727 227 634\n\n\n    console.log(`${this.pokemonByNameUrl}/${term}`);\n    return this.http.get(`${this.pokemonByNameUrl}/${term}`).pipe(tap(x => {\n      console.log('aaaaaa');\n\n      for (const [k, v] of Object.entries(x)) {\n        if (v.name === term) {\n          console.log('daaaa'); // window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n        } else {\n          console.log('nuu');\n        } // console.log(x['name'] === term);\n\n      } // if(x){\n      //   window.location.href = 'https://pokeapi.co/api/v2/pokemon/bulbasaur';\n      // }else{\n      //   console.log('nuuuuu');\n      // }\n\n    } // x.length ?\n    // this.log(`found pokemons matching \"${term}\"`) :\n    // this.log(`no pokemons matching \"${term}\"`)),\n    // catchError(this.handleError<Pokemon[]>('searchPokemons', []))\n    ));\n  }\n\n  basicSearch(term) {\n    let results = this.http.get(`${this.pokemonByNameUrl}/?name=${term}`); // console.log(results);\n\n    return results;\n  } // getPokemonColour(): { type: string; color: string}[] \n\n\n  getPokemonColor(type) {\n    let color = 'gray';\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n    if (type === '') {\n      return color;\n    }\n\n    let pokemonTypes = this.getPokemonTypes();\n    return pokemonTypes.map(item => {\n      item.color = color[Math.floor(Math.random() * 20)];\n    }); // pokemonTypes.forEach(item => {\n    //       for (const [key, value] of Object.entries(item.results)) { \n    //           if(value.name === type){\n    //             color = colors[Number(key)];\n    //             break;\n    //           }\n    //       }\n    //   });\n    //   return color;\n  }\n\n  getPokemonColour2(type) {\n    var colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n    let aa = '';\n    let pokemoTypes = [];\n    this.getPokemonTypes().forEach(item => {\n      for (const [key, value] of Object.entries(item.results)) {\n        console.log(type);\n\n        if (value.name === type) {\n          console.log('vvvv'); //   console.log(colors[Number(key)]);\n          //return colors[Number(key)];\n        }\n      }\n    }); //    console.log(this.bb);\n    // console.log(this.pokemoTypes.keys);\n    //  console.log('xxx');\n    // pokemoTypes.forEach(item => {\n    //   console.log(item.color[0]);\n    // });\n    // this.getPokemonTypes().forEach(item => {\n    //   //console.log(item.results[0].name);\n    //   //res.push(item.results);\n    //   item.results.forEach(item => { // was missing a )\n    //             //console.log(item);\n    //             this.pokemoTypes.push(\n    //                 {\n    //                   type: item.name,\n    //                   color: colors[Number(1)]\n    //                 }\n    //             );\n    //   });\n    // });\n    // return this.pokemoTypes;\n  } // this.http.get<Pokemon>('http://pokeapi.co/api/v2/pokemon/?limit=30&offset=0.').subscribe(data => {\n  //     this.pokemons = data.results;\n  // })\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n\n\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n\n      this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n}\n\nPokemonCRUDService.ɵfac = function PokemonCRUDService_Factory(t) {\n  return new (t || PokemonCRUDService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.ActivatedRoute));\n};\n\nPokemonCRUDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PokemonCRUDService,\n  factory: PokemonCRUDService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","tap","PokemonCRUDService","constructor","http","messageService","route","headers","getPokemons2","get","pokemonsUrl","getSearchedPokemon","term","trim","pokemonByNameUrl","subscribe","response","k","v","Object","entries","name","console","log","handleError","getPokemonTypes","PokemonTypesUrl","getPokemonImage","data","i","res","forEach","item","results","childrenEntry","list","push","id","Number","url","split","length","getPokemon","pipe","_","getPokemonIdByName","searchPokemons","x","basicSearch","getPokemonColor","type","color","colors","pokemonTypes","map","Math","floor","random","getPokemonColour2","aa","pokemoTypes","key","value","operation","result","error","message","add","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/pokemon-crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { Pokemon } from './pokemon.model';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PokemonCRUDService {\n\n  private pokemonsUrl = 'http://pokeapi.co/api/v2/pokemon/?limit=30&offset=0.';\n  private pokemonByNameUrl = 'https://pokeapi.co/api/v2/pokemon'\n  private pokemonImg: any;\n  private results: any;\n  private res: any;\n  public list: {id: number, name: string; url: string}[] = [];\n  private pokemoTypes: { type: string; color: string}[] = [];\n  public bb: [] = [];\n\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(private http: HttpClient, private messageService: MessageService, private route: ActivatedRoute) {}\n\n      // getPokemons(): Observable<PokemonsPayload>  {\n      //   return this.http.get<PokemonsPayload>(this.pokemonsUrl);\n      // }\n\n      getPokemons2(): Observable<Pokemon>  {\n        return this.http.get<Pokemon>(this.pokemonsUrl);\n      }\n\n      getSearchedPokemon(term: string): void \n      {\n          if (!term.trim()) {\n            // if not search term, return empty pokemon array.\n            return ;\n          }\n\n          this.http.get<Pokemon>(`${this.pokemonByNameUrl}/${term}`).subscribe(\n            response => {\n             // console.log(response);\n                for (const [k, v] of Object.entries(response)) {\n                  if(v.name === term){\n                     // window.location.href = `${this.pokemonByNameUrl}/${term}`;\n                     console.log('daaa');\n                  }\n                }\n            },\n            catchError(this.handleError<Pokemon[]>('getSearchedPokemon', []))\n        );\n    }\n\n    getPokemonTypes()\n    {\n      var PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n      return this.http.get<Pokemon>(PokemonTypesUrl);\n    }\n\n  //   async processPokem()\n  //   {\n  //     let result: any;\n  //     let user_list: [] = [];\n  //     for (const [key, value] of Object.entries(this.getPokemonTypes())) { \n  //         result = await this.getPokemonTypes();\n  //         // user_list.push(result);\n  //         user_list = result;\n  //     }\n  //     return user_list;\n  // }\n      \n\n    getPokemonImage(): any\n    {\n        // let list: string[] = [];\n        //let list: {id: number, name: string; url: string}[] = [];\n        var data =  this.getPokemons2();\n        let i = 0;\n        var res: any[] = [];\n\n        // console.log(this.getPokemons2());\n\n      //   this.getPokemons2.subscribe(\n      //     data => {\n      //         this.results = data.Results\n      //     }\n      // );\n\n        this.getPokemons2().forEach(item => {\n          //console.log(item.results[0].name);\n          //res.push(item.results);\n          item.results.forEach(childrenEntry => { // was missing a )\n                    \n                    this.list.push(\n                        {\n                          id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length-2]),\n                          name: childrenEntry.name, \n                          url: childrenEntry.url,\n                        }\n                    );\n          });\n        });\n\n        // res.forEach(item2 => {\n        //   //console.log(item.results[0].name);\n        //   list.push(item2.name);\n        // });\n\n        //  console.log(res);\n          console.log(this.list);\n        \n\n\n\n\n        //  var dataModels = [];\n\n        //  dataModels[0] = {\n        //      childNodes: []\n        //  };\n          \n        //  dataModels[0].childNodes[0] = {\n        //      appId: \"foo\"\n        //  };\n          \n        //  dataModels.forEach(function(entry){ \n        //      entry.childNodes.forEach(function(childrenEntry) { // was missing a )\n        //        console.log(childrenEntry.appId);\n        //      });\n        //  });\n      return this.list;\n    }\n\n    // /** GET hero by id. Will 404 if id not found */\n    getPokemon(id: number): Observable<Pokemon> {\n      const url = `${this.pokemonByNameUrl}/${id}`;\n      console.log(url);\n      return this.http.get<Pokemon>(url).pipe(\n        tap(_ => this.log(`fetched Pokemon id=${id}`)),\n        catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n      );\n    }\n\n    getPokemonIdByName(name: string): number | undefined | null\n    {\n        if (!name.trim()) {\n          // if not search term, return empty pokemon array.\n          return null;\n        }\n\n        this.http.get<Pokemon>(`${this.pokemonByNameUrl}/${name}`).subscribe(\n          response => {\n          // console.log(response);\n              for (const [k, v] of Object.entries(response)) {\n                if(v.name === name){\n                  // window.location.href = `${this.pokemonByNameUrl}/${term}`;\n                  console.log('daaa');\n\n                  return v.id;\n                }\n              }\n          },\n          catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n        );\n\n        return;\n    }\n\n\n    // /* GET heroes whose name contains search term */\n    // searchPokemons2(term: string): any {\n    //   console.log('asaaa');\n\n    //   if (!term.trim()) {\n    //     // if not search term, return empty pokemon array.\n    //     return of([]);\n    //   }\n\n      \n    //    console.log(`${this.pokemonByNameUrl}/${term}`);\n    //    this.http.get<Pokemon[]>(`${this.pokemonByNameUrl}/${term}`).pipe(\n    //     tap(\n    //       (x) => {\n    //         console.log('aaaaaa');\n    //         for (const [k, v] of Object.entries(x)) {\n    //           if(v.name === term){\n    //             console.log('daaaa');\n    //           // window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n    //           }else{\n    //             console.log('nuu');\n    //           }\n    //           // console.log(x['name'] === term);\n    //         }\n            \n    //         // if(x){\n    //         //   window.location.href = 'https://pokeapi.co/api/v2/pokemon/bulbasaur';\n    //         // }else{\n    //         //   console.log('nuuuuu');\n    //         // }\n    //       }\n          \n    //       // x.length ?\n    //       // this.log(`found pokemons matching \"${term}\"`) :\n    //       // this.log(`no pokemons matching \"${term}\"`)),\n    //     // catchError(this.handleError<Pokemon[]>('searchPokemons', []))\n    //   ));\n\n    //  // return 'daa';\n    // }\n\n\n\n    /* GET heroes whose name contains search term */\n    searchPokemons(term: string): Observable<Pokemon[]> {\n      // let results = this.http.get<Pokemon>(`https://pokeapi.co/api/v2/pokemon/bulbasaur`);\n      // results.forEach(item2 => {\n      //   console.log(item2);\n      //   // res.push(item.results);\n      //   // item.results.forEach(childrenEntry => { // was missing a )\n      //   //          list.push({name: childrenEntry.name, url: childrenEntry.url});\n      //   // });\n      // });\n\n     //  console.log(term);\n      console.log('asaaa');\n\n      if (!term.trim()) {\n        // if not search term, return empty pokemon array.\n        return of([]);\n      }\n//0727 227 634\n      \n      console.log(`${this.pokemonByNameUrl}/${term}`);\n      return this.http.get<Pokemon[]>(`${this.pokemonByNameUrl}/${term}`).pipe(\n        tap(\n          (x) => {\n            console.log('aaaaaa');\n            for (const [k, v] of Object.entries(x)) {\n              if(v.name === term){\n                console.log('daaaa');\n              // window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n              }else{\n                console.log('nuu');\n              }\n              // console.log(x['name'] === term);\n            }\n            \n            // if(x){\n            //   window.location.href = 'https://pokeapi.co/api/v2/pokemon/bulbasaur';\n            // }else{\n            //   console.log('nuuuuu');\n            // }\n          }\n          \n          // x.length ?\n          // this.log(`found pokemons matching \"${term}\"`) :\n          // this.log(`no pokemons matching \"${term}\"`)),\n        // catchError(this.handleError<Pokemon[]>('searchPokemons', []))\n      ));\n    }\n\n    basicSearch(term: string): any\n    {\n      let results = this.http.get<Pokemon>(`${this.pokemonByNameUrl}/?name=${term}`);\n     // console.log(results);\n\n      return results;\n    }\n\n    // getPokemonColour(): { type: string; color: string}[] \n\n    getPokemonColor(type: string): any\n    {\n      let color = 'gray';\n\n      let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \n      'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n      'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n      if(type === ''){\n        return color;\n      }\n\n      let pokemonTypes = this.getPokemonTypes();\n\n      return pokemonTypes.map(item => {\n        item.color =  color[Math.floor(Math.random() *20)];\n      })\n\n      // pokemonTypes.forEach(item => {\n      //       for (const [key, value] of Object.entries(item.results)) { \n      //           if(value.name === type){\n      //             color = colors[Number(key)];\n      //             break;\n      //           }\n      //       }\n      //   });\n\n      //   return color;\n    }\n\n\n\n    getPokemonColour2(type: string): any\n    {\n      var colors= ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \n      'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n      'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n\n      let aa = '';\n      let pokemoTypes: { type: string; color: string}[] = [];\n\n      this.getPokemonTypes().forEach(item => {\n          for (const [key, value] of Object.entries(item.results)) { \n          console.log(type);\n          if(value.name === type){\n            console.log('vvvv');\n         //   console.log(colors[Number(key)]);\n              //return colors[Number(key)];\n          }\n          }\n      });\n\n  //    console.log(this.bb);\n\n    // console.log(this.pokemoTypes.keys);\n\n    //  console.log('xxx');\n    // pokemoTypes.forEach(item => {\n    //   console.log(item.color[0]);\n    // });\n      \n\n      // this.getPokemonTypes().forEach(item => {\n      //   //console.log(item.results[0].name);\n      //   //res.push(item.results);\n      //   item.results.forEach(item => { // was missing a )\n      //             //console.log(item);\n      //             this.pokemoTypes.push(\n      //                 {\n      //                   type: item.name,\n      //                   color: colors[Number(1)]\n      //                 }\n      //             );\n      //   });\n      // });\n\n      // return this.pokemoTypes;\n    }\n\n\n    // this.http.get<Pokemon>('http://pokeapi.co/api/v2/pokemon/?limit=30&offset=0.').subscribe(data => {\n          //     this.pokemons = data.results;\n          // })\n\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     *\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    private handleError<T>(operation = 'operation', result?: T) {\n      return (error: any): Observable<T> => {\n\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n\n        // Let the app keep running by returning an empty result.\n        return of(result as T);\n      };\n    }\n\n    /** Log a HeroService message with the MessageService */\n    private log(message: string) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}