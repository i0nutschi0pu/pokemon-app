{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../pokemon-crud.service\";\nimport * as i3 from \"@angular/common\";\nfunction PokemonEvolutionComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h5\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.noPossibleEvolution, \" \");\n  }\n}\nfunction PokemonEvolutionComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"h5\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelement(5, \"img\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" evolves into \", i0.ɵɵpipeBind1(3, 3, ctx_r1.evolves_to), \" at level \", ctx_r1.evolutionLevel, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r1.pokemonImg, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class PokemonEvolutionComponent {\n  constructor(route, pokemonService) {\n    this.route = route;\n    this.pokemonService = pokemonService;\n  }\n  ngOnInit() {\n    this.pokemonService.getPokemonSpecie(this.getPokemonId()).subscribe(response => {\n      this.getPokemonEvolution(response, this.getPokemonId());\n    });\n  }\n  getPokemonId() {\n    return parseInt(this.route.snapshot.paramMap.get('id'), 10);\n  }\n  getPokemonEvolutionId() {\n    var subject = new Subject();\n    let pokemonEvolutionId;\n    this.pokemonService.getPokemonSpecie(this.getPokemonId()).subscribe(response => {\n      // console.log(response);\n      pokemonEvolutionId = Number(response.evolution_chain.url.split('/')[response.evolution_chain.url.split('/').length - 2]);\n      subject.next(pokemonEvolutionId);\n    });\n    return subject.asObservable();\n  }\n  getPokemonImg(Id) {\n    var subject = new Subject();\n    let pokemonNameEvolution;\n    this.pokemonService.getPokemon(Id).subscribe(response => {\n      pokemonNameEvolution = response.name;\n      subject.next(pokemonNameEvolution);\n      // this.pokemonEvolution = pokemonEvolution;\n      this.pokemonName = response.name;\n      for (const [k, v] of Object.entries(response.sprites)) {\n        if (k === 'front_default') {\n          return this.pokemonImg = v;\n        }\n      }\n    });\n    return subject.asObservable();\n  }\n  getPokemonEvolution(id, pokemonId) {\n    // var subject = new Subject<number>();\n    let pokemonNameEvolutionId;\n    let secondEvolutionSpecieId;\n    let firstEvolutionSpecieId;\n    let level = 1;\n    this.pokemonService.getEvolutionDetails(id).subscribe(pokemonEvolution => {\n      this.currentSpecie = pokemonEvolution.chain.species.name;\n      // console.log(this.currentSpecie );\n      pokemonEvolution.chain.evolves_to.forEach(lists => {\n        lists.evolves_to.forEach(evols => {\n          // console.log(evols );\n          pokemonNameEvolutionId = Number(evols['species']['url'].split('/')[evols['species']['url'].split('/').length - 2]);\n          this.pokemonEvolutionImg = this.getPokemonImg(pokemonNameEvolutionId);\n          secondEvolutionSpecieId = pokemonNameEvolutionId;\n          // subject.next(pokemonNameEvolutionId);\n          this.secondEvolutionSpecie = evols['species']['name'];\n          // console.log(secondEvolutionSpecieId);\n        });\n        // first evolution\n        pokemonNameEvolutionId = Number(lists['species']['url'].split('/')[lists['species']['url'].split('/').length - 2]);\n        this.pokemonEvolutionImg = this.getPokemonImg(pokemonNameEvolutionId);\n        // subject.next(pokemonNameEvolutionId);\n        this.firstEvolutionSpecie = lists['species']['name'];\n        firstEvolutionSpecieId = pokemonNameEvolutionId;\n        // console.log(firstEvolutionSpecieId);\n      });\n      // console.log(this.firstEvolutionSpecie );\n      // console.log(this.secondEvolutionSpecie );\n      if (pokemonId === firstEvolutionSpecieId) {\n        this.evolves_to = this.secondEvolutionSpecie;\n      } else if (pokemonId === secondEvolutionSpecieId) {\n        this.evolves_to = null;\n        this.noPossibleEvolution = 'There is no evolution possible';\n      } else {\n        this.evolves_to = this.firstEvolutionSpecie;\n      }\n      // this.evolves_to = pokemonEvolution.chain.evolves_to.species.name;\n      pokemonEvolution.chain.evolves_to.forEach(items => {\n        // console.log(items.evolution_details);\n        items.evolution_details.forEach(details => {\n          // console.log(details.min_level);\n          this.evolutionLevel = details.min_level;\n        });\n      });\n    });\n    //  console.log(subject.asObservable());\n  }\n  static #_ = this.ɵfac = function PokemonEvolutionComponent_Factory(t) {\n    return new (t || PokemonEvolutionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PokemonCRUDService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PokemonEvolutionComponent,\n    selectors: [[\"app-pokemon-evolution\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"text-left\"], [1, \"row\"], [1, \"text-center\", \"col-12\"], [1, \"imgWH\", 2, \"padding-top\", \"37px\", 3, \"src\"]],\n    template: function PokemonEvolutionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PokemonEvolutionComponent_div_0_Template, 3, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, PokemonEvolutionComponent_div_1_Template, 6, 5, \"div\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.noPossibleEvolution);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.noPossibleEvolution);\n      }\n    },\n    dependencies: [i3.NgIf, i3.UpperCasePipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Subject","i0","PokemonEvolutionComponent","constructor","route","pokemonService","ngOnInit","getPokemonSpecie","getPokemonId","subscribe","response","getPokemonEvolution","parseInt","snapshot","paramMap","get","getPokemonEvolutionId","subject","pokemonEvolutionId","Number","evolution_chain","url","split","length","next","asObservable","getPokemonImg","Id","pokemonNameEvolution","getPokemon","name","pokemonName","k","v","Object","entries","sprites","pokemonImg","id","pokemonId","pokemonNameEvolutionId","secondEvolutionSpecieId","firstEvolutionSpecieId","level","getEvolutionDetails","pokemonEvolution","currentSpecie","chain","species","evolves_to","forEach","lists","evols","pokemonEvolutionImg","secondEvolutionSpecie","firstEvolutionSpecie","noPossibleEvolution","items","evolution_details","details","evolutionLevel","min_level","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/components/pokemons/pokemon-evolution/pokemon-evolution.component.ts","/Users/ionut/pokemon_app/src/app/components/pokemons/pokemon-evolution/pokemon-evolution.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Pokemon, PokemonEvolution } from '../../../pokemon.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { PokemonCRUDService } from '../../../pokemon-crud.service';\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-pokemon-evolution',\n  templateUrl: './pokemon-evolution.component.html',\n  styleUrls: ['./pokemon-evolution.component.css']\n})\nexport class PokemonEvolutionComponent implements OnInit {\n\n  pokemonName!: string\n  pokemonEvolution!: PokemonEvolution;\n  pokemonImg!: string;\n  pokemonEvolutionImg!: string;\n  evolutionLevel!: \n  { evolves_to: \n    [ \n      { evolution_details: \n        [\n          {min_level:  number;}\n        ], \n        evolves_to: \n        [\n          {species: {name: string}} \n        ]\n      }\n    ], \n    species: {name: string} \n  };\n  evolves_to!: string | null;\n  pokemonNameEvolution!: string;\n  pokemonEvolutionId!: number;\n  evolutionSpecieId!: number;\n  currentSpecie!: string;\n  firstEvolutionSpecie!: string;\n  secondEvolutionSpecie!: string;\n  noPossibleEvolution!: string;\n\n\n  constructor(\n    private route: ActivatedRoute,\n    private pokemonService: PokemonCRUDService,\n  ) {}\n\n  ngOnInit(): void {\n\n      this.pokemonService.getPokemonSpecie(this.getPokemonId()).subscribe(\n        response => {\n          this.getPokemonEvolution(response, this.getPokemonId());\n        }\n      );\n  }\n\n  getPokemonId(): number\n  {\n    return parseInt(this.route.snapshot.paramMap.get('id')!, 10);\n  }\n\n  getPokemonEvolutionId()\n  {\n    var subject = new Subject<number>();\n    let pokemonEvolutionId: number;\n\n    this.pokemonService.getPokemonSpecie(this.getPokemonId()).subscribe(\n      response => {\n        // console.log(response);\n\n        pokemonEvolutionId =  Number(response.evolution_chain.url.split('/')[response.evolution_chain.url.split('/').length - 2]);\n        subject.next(pokemonEvolutionId);\n      }\n    );\n\n    return subject.asObservable();\n  }\n\n  getPokemonImg(Id: number): any\n  {\n\n    var subject = new Subject<string>();\n    let pokemonNameEvolution: string;\n\n    this.pokemonService.getPokemon(Id).subscribe(\n      response => {\n        pokemonNameEvolution = response.name;\n        subject.next(pokemonNameEvolution);\n        // this.pokemonEvolution = pokemonEvolution;\n        this.pokemonName = response.name;\n\n        for (const [k, v] of Object.entries(response.sprites)) {\n          if (k === 'front_default') {\n            return this.pokemonImg = v;\n          }\n\n          \n        }\n      }\n    );\n\n    return subject.asObservable();\n  }\n\n  getPokemonEvolution(id: any, pokemonId: number): any\n  {\n    // var subject = new Subject<number>();\n    let pokemonNameEvolutionId: number;\n    let secondEvolutionSpecieId: number;\n    let firstEvolutionSpecieId: number;\n\n    let level = 1;\n    this.pokemonService.getEvolutionDetails(id)\n      .subscribe( (pokemonEvolution)  => {\n        this.currentSpecie = pokemonEvolution.chain.species.name;\n        // console.log(this.currentSpecie );\n\n        pokemonEvolution.chain.evolves_to.forEach( (lists: any) => {\n          lists.evolves_to.forEach( (evols: any) => { // second evolution\n            // console.log(evols );\n            pokemonNameEvolutionId = Number(evols['species']['url'].split('/')[evols['species']['url'].split('/').length - 2]);\n            this.pokemonEvolutionImg = this.getPokemonImg(pokemonNameEvolutionId);\n            secondEvolutionSpecieId = pokemonNameEvolutionId;\n            // subject.next(pokemonNameEvolutionId);\n            this.secondEvolutionSpecie = evols['species']['name'];\n            // console.log(secondEvolutionSpecieId);\n          \n          });\n\n          // first evolution\n          pokemonNameEvolutionId =  Number(lists['species']['url'].split('/')[lists['species']['url'].split('/').length - 2]);\n          this.pokemonEvolutionImg = this.getPokemonImg(pokemonNameEvolutionId)\n          // subject.next(pokemonNameEvolutionId);\n          this.firstEvolutionSpecie = lists['species']['name'];\n          firstEvolutionSpecieId = pokemonNameEvolutionId;\n          // console.log(firstEvolutionSpecieId);\n        });\n\n        // console.log(this.firstEvolutionSpecie );\n        // console.log(this.secondEvolutionSpecie );\n        \n        if(pokemonId === firstEvolutionSpecieId) {\n          this.evolves_to = this.secondEvolutionSpecie;\n        }else if(pokemonId === secondEvolutionSpecieId){\n          this.evolves_to = null;\n          this.noPossibleEvolution = 'There is no evolution possible';\n        }\n        else{\n          this.evolves_to = this.firstEvolutionSpecie;\n        }\n\n        // this.evolves_to = pokemonEvolution.chain.evolves_to.species.name;\n\n\n        pokemonEvolution.chain.evolves_to.forEach( (items: {evolution_details: any, }) => {\n          // console.log(items.evolution_details);\n          items.evolution_details.forEach( (details: {min_level: any}) => {\n            // console.log(details.min_level);\n            this.evolutionLevel = details.min_level;\n          });\n      });\n     });\n\n    //  console.log(subject.asObservable());\n  }\n\n}\n","<!-- <p>{{pokemonEvolution | json}}</p> -->\n<!-- <h5 class=\"pl-5\">{{pokemonEvolution.id}} evolves into  at </h5> -->\n<!-- <h5 class=\"pl-5\">{{pokemonEvolution.chain.evolves_to.evolution_details.min_level}} evolves into  at </h5> -->\n\n<div *ngIf=\"noPossibleEvolution\">\n    <h5 class=\"text-left\"> {{noPossibleEvolution}} </h5>\n</div>\n<div class=\"row\" *ngIf=\"!noPossibleEvolution\">\n    <h5 class=\"text-center col-12\"> evolves into {{evolves_to | uppercase}} at level {{evolutionLevel}}</h5>\n    <div>\n        <img src=\"{{pokemonImg}}\" class=\"imgWH\" style=\"padding-top: 37px;\" />\n    </div>\n</div>\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}