{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { POKEMONS_URL, POKEMON_DAMAGE_FIRST_CLASS_URL, POKEMON_DAMAGE_SECOND_CLASS_URL, POKEMON_DAMAGE_THIRD_CLASS_URL, POKEMON_EVOLUTIONS_URL, POKEMON_IMG_URL, POKEMON_SPECIES_URL, POKEMON_TYPE_URL, POKEMON_URL } from '../constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"@angular/router\";\nexport class PokemonCRUDService {\n  constructor(http, messageService, route) {\n    this.http = http;\n    this.messageService = messageService;\n    this.route = route;\n    this.pokemonsDetails = [];\n    this.previousButton = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getPokemons(pokemonsUrl) {\n    return this.http.get(pokemonsUrl);\n  }\n  getSearchedPokemon(term) {\n    if (!term.trim()) {\n      return;\n    }\n    this.http.get(`${POKEMON_URL}/${term}`).subscribe(response => {\n      if (response) {\n        window.location.href = window.location.origin + '/details/' + `${response.id}`;\n      }\n    }, catchError(this.handleError('getSearchedPokemon', [])));\n  }\n  getPokemonImage(pokemonUrl) {\n    if (!pokemonUrl) {\n      pokemonUrl = POKEMONS_URL;\n    }\n    this.getPokemons(pokemonUrl).forEach(pokemons => {\n      this.previousButton = pokemons.previous;\n      pokemons.results.forEach(pokemonsList => {\n        this.pokemonsDetails.push({\n          id: Number(pokemonsList.url.split('/')[pokemonsList.url.split('/').length - 2]),\n          name: pokemonsList.name,\n          url: pokemonsList.url,\n          sprites: POKEMON_IMG_URL + Number(pokemonsList.url.split('/')[pokemonsList.url.split('/').length - 2]) + '.png'\n        });\n      });\n    });\n    return this.pokemonsDetails;\n  }\n  getPokemon(id) {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  // getPokemonIdByName(name: string): number | undefined | null \n  // {\n  //   if (!name.trim()) {\n  //     return null;\n  //   }\n  //   this.http.get<Pokemon>(`${POKEMON_URL}/${name}`).subscribe(\n  //     response => {\n  //       for (const [k, v] of Object.entries(response)) {\n  //         if (v.name === name) {\n  //           window.location.href = `${POKEMON_URL}/${name}`;\n  //           return v.id;\n  //         }\n  //       }\n  //     },\n  //     catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n  //   );\n  //   return;\n  // }\n  searchPokemons(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${POKEMON_URL}/${term}`).pipe(tap(x => {\n      for (const [k, v] of Object.entries(x)) {\n        if (v.name === term) {\n          window.location.href = POKEMON_URL + term;\n        }\n      }\n    }));\n  }\n  basicSearch(term) {\n    let results = this.http.get(`${POKEMON_URL}/?name=${term}`);\n    return results;\n  }\n  getPokemonColor() {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n    let types = [];\n    return this.http.get(POKEMON_TYPE_URL).pipe(map(data => {\n      // console.log(data.results);\n      data.results.forEach((itemsV, innerIdx) => {\n        // console.log(itemsV.name);\n        types.push({\n          name: itemsV.name,\n          color: colors[innerIdx]\n        });\n      });\n      return types;\n    }), catchError(this.handleError(`something went wrong`)));\n  }\n  getMovesForStatusDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_FIRST_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForPhysicalDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_SECOND_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 2nd damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForSpecialDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_THIRD_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 3rd damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getPokemonSpecie(id) {\n    const url = `${POKEMON_SPECIES_URL}/${id}`;\n    let pokemonEvolutionId;\n    return this.http.get(url).pipe(map(data => {\n      pokemonEvolutionId = Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n      return pokemonEvolutionId;\n    }), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getEvolutionDetails(id) {\n    const url = `${POKEMON_EVOLUTIONS_URL}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon evolution id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  log(message) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n  static #_ = this.ɵfac = function PokemonCRUDService_Factory(t) {\n    return new (t || PokemonCRUDService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonCRUDService,\n    factory: PokemonCRUDService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","POKEMONS_URL","POKEMON_DAMAGE_FIRST_CLASS_URL","POKEMON_DAMAGE_SECOND_CLASS_URL","POKEMON_DAMAGE_THIRD_CLASS_URL","POKEMON_EVOLUTIONS_URL","POKEMON_IMG_URL","POKEMON_SPECIES_URL","POKEMON_TYPE_URL","POKEMON_URL","PokemonCRUDService","constructor","http","messageService","route","headers","getPokemons","pokemonsUrl","get","getSearchedPokemon","term","trim","subscribe","response","window","location","href","origin","id","handleError","getPokemonImage","pokemonUrl","forEach","pokemons","previousButton","previous","results","pokemonsList","pokemonsDetails","push","Number","url","split","length","name","sprites","getPokemon","pipe","_","log","searchPokemons","x","k","v","Object","entries","basicSearch","getPokemonColor","colors","types","data","itemsV","innerIdx","color","getMovesForStatusDamageClass","getMovesForPhysicalDamageClass","getMovesForSpecialDamageClass","getPokemonSpecie","pokemonEvolutionId","evolution_chain","getEvolutionDetails","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/service/pokemon-crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { Pokemon, PokemonDamage, PokemonEvolution, Pokemons } from '../model/pokemon.model';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { POKEMONS_URL, POKEMON_DAMAGE_FIRST_CLASS_URL, POKEMON_DAMAGE_SECOND_CLASS_URL, POKEMON_DAMAGE_THIRD_CLASS_URL, \n  POKEMON_EVOLUTIONS_URL, \n  POKEMON_IMG_URL, POKEMON_SPECIES_URL, POKEMON_TYPE_URL, POKEMON_URL } from '../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PokemonCRUDService {\n  \n  pokemonsDetails: {id: number, name: string; url: string, sprites: any }[] = [];\n  previousButton: []=[];\n  pokemon?: Pokemon;\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient, private messageService: MessageService, private route: ActivatedRoute) { \n  }\n\n  getPokemons(pokemonsUrl: string): Observable<Pokemon> {\n    return this.http.get<Pokemon>(pokemonsUrl);\n  }\n\n  getSearchedPokemon(term: string): void \n  {\n    if (!term.trim()) {\n      return;\n    }\n\n    this.http.get<Pokemon>(`${POKEMON_URL}/${term}`).subscribe(\n      response => {\n        \n        if(response){\n          window.location.href =  window.location.origin + '/details/' +  `${response.id}`;\n        }\n        \n      },\n      catchError(this.handleError<Pokemon[]>('getSearchedPokemon', []))\n    );\n  }\n\n  getPokemonImage(pokemonUrl: string | null): any\n  {\n    if(!pokemonUrl){\n      pokemonUrl =  POKEMONS_URL;\n    }\n\n    this.getPokemons(pokemonUrl).forEach(pokemons => {\n      this.previousButton = pokemons.previous;\n\n      pokemons.results.forEach(pokemonsList => {\n        this.pokemonsDetails.push(\n          {\n            id: Number(pokemonsList.url.split('/')[pokemonsList.url.split('/').length - 2]),\n            name: pokemonsList.name,\n            url: pokemonsList.url,\n            sprites: POKEMON_IMG_URL + \n              Number(pokemonsList.url.split('/')[pokemonsList.url.split('/').length - 2]) + \n              '.png'\n        });\n      });\n    });\n\n    return this.pokemonsDetails;\n  }\n\n\n  getPokemon(id: number): Observable<Pokemon> \n  {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get<Pokemon>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon id=${id}`)),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n  // getPokemonIdByName(name: string): number | undefined | null \n  // {\n  //   if (!name.trim()) {\n  //     return null;\n  //   }\n\n  //   this.http.get<Pokemon>(`${POKEMON_URL}/${name}`).subscribe(\n  //     response => {\n  //       for (const [k, v] of Object.entries(response)) {\n  //         if (v.name === name) {\n  //           window.location.href = `${POKEMON_URL}/${name}`;\n  //           return v.id;\n  //         }\n  //       }\n  //     },\n  //     catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n  //   );\n\n  //   return;\n  // }\n\n  searchPokemons(term: string): Observable<Pokemon[]> \n  {\n\n    if (!term.trim()) {\n\n      return of([]);\n    }\n    return this.http.get<Pokemon[]>(`${POKEMON_URL}/${term}`).pipe(\n      tap(\n        (x) => {\n          for (const [k, v] of Object.entries(x)) {\n            if (v.name === term) {\n              window.location.href = POKEMON_URL + term;\n            }\n          }\n        }\n      ));\n  }\n\n  basicSearch(term: string): any {\n    let results = this.http.get<Pokemon>(`${POKEMON_URL}/?name=${term}`);\n    return results;\n  }\n\n  getPokemonColor(): any \n  {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \n      'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n      'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n    let types: { name: string; color: string}[] = [];\n\n    return this.http.get(POKEMON_TYPE_URL).\n      pipe(\n        map((data: any) => {\n          // console.log(data.results);\n          data.results.forEach((itemsV: any, innerIdx: any) =>{\n            // console.log(itemsV.name);\n\n            types.push(\n                {\n                  name: itemsV.name,\n                  color: colors[innerIdx]\n                }\n            );            \n          });\n\n          return types;\n        }), catchError(this.handleError<Pokemon>(`something went wrong`))\n      )\n  }\n\n  getMovesForStatusDamageClass() : Observable<PokemonDamage> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_FIRST_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForPhysicalDamageClass() : Observable<PokemonDamage> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_SECOND_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 2nd damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForSpecialDamageClass() : Observable<any> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_THIRD_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 3rd damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getPokemonSpecie(id: number): Observable<any> {\n    const url = `${POKEMON_SPECIES_URL}/${id}`;\n    let pokemonEvolutionId: Number;\n    return this.http.get<any>(url)\n    .pipe(\n      map((data: any) => {\n        pokemonEvolutionId =  Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n\n        return pokemonEvolutionId;\n      }),  catchError(this.handleError<any>(`getPokemon id=${id}`))\n    )\n  }\n\n  getEvolutionDetails(id: number): Observable<PokemonEvolution> {\n    const url = `${POKEMON_EVOLUTIONS_URL}/${id}`;\n    return this.http.get<PokemonEvolution>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon evolution id=${id}`)),\n      catchError(this.handleError<PokemonEvolution>(`getPokemon id=${id}`))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}