{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"@angular/router\";\nexport class PokemonCRUDService {\n  constructor(http, messageService, route) {\n    this.http = http;\n    this.messageService = messageService;\n    this.route = route;\n    this.pokemonsUrl = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=20';\n    this.pokemonByNameUrl = 'https://pokeapi.co/api/v2/pokemon';\n    this.pokemonSpecieUrl = 'https://pokeapi.co/api/v2/pokemon-species';\n    this.pokemonEvolutionsUrl = 'https://pokeapi.co/api/v2/evolution-chain';\n    this.results = [];\n    this.list = [];\n    this.pokemoTypes = [];\n    this.bb = [];\n    this.infodata = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getPokemons(pokemonsUrl) {\n    pokemonsUrl = pokemonsUrl.replace('http://localhost:4200/%22', '');\n    return this.http.get(pokemonsUrl);\n  }\n  getTotalNumberOfPokemons() {\n    let count = 0;\n    return this.http.get(`https://pokeapi.co/api/v2/pokemon`).pipe(map(pokemonsCount => pokemonsCount['count']),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n    }), catchError(this.handleError('getTotalNumberOfPokemons', [])));\n  }\n  getSearchedPokemon(term) {\n    if (!term.trim()) {\n      return;\n    }\n    this.http.get(`${this.pokemonByNameUrl}/${term}`).subscribe(response => {\n      if (response) {\n        window.location.href = window.location.origin + '/details/' + `${response.id}`;\n      }\n    }, catchError(this.handleError('getSearchedPokemon', [])));\n  }\n  getPokemonTypes() {\n    var PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n    return this.http.get(PokemonTypesUrl);\n  }\n  getPokemonImg(Id) {\n    let imgUrl = '';\n    let no = 0;\n    this.getTotalNumberOfPokemons().subscribe(response => {\n      no = response;\n      //console.log(response);\n    });\n\n    this.getPokemon(Id).subscribe(response => {\n      for (const [k, v] of Object.entries(response.sprites)) {\n        if (k === 'front_default') {\n          imgUrl = v;\n        }\n      }\n    }, catchError(this.handleError('getPokemonIdByName', [])));\n    return imgUrl;\n  }\n  getPokemonImage(pokemonUrl) {\n    if (!pokemonUrl) {\n      pokemonUrl = this.pokemonsUrl;\n    }\n    this.getPokemons(pokemonUrl).forEach(item => {\n      this.previousButton = item.previous;\n      item.results.forEach(childrenEntry => {\n        this.list.push({\n          id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]),\n          name: childrenEntry.name,\n          url: childrenEntry.url,\n          sprites: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' + Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]) + '.png'\n        });\n      });\n    });\n    return this.list;\n  }\n  getPokemon(id) {\n    const url = `${this.pokemonByNameUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getPokemonLast(id) {\n    const url = `${this.pokemonByNameUrl}/${id}`;\n    return this.http.get(url).pipe(tap(x => {\n      this.pokemon.sprites.front_default;\n    }), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getPokemonIdByName(name) {\n    if (!name.trim()) {\n      return null;\n    }\n    this.http.get(`${this.pokemonByNameUrl}/${name}`).subscribe(response => {\n      for (const [k, v] of Object.entries(response)) {\n        if (v.name === name) {\n          window.location.href = `${this.pokemonByNameUrl}/${name}`;\n          return v.id;\n        }\n      }\n    }, catchError(this.handleError('getPokemonIdByName', [])));\n    return;\n  }\n  searchPokemons(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${this.pokemonByNameUrl}/${term}`).pipe(tap(x => {\n      for (const [k, v] of Object.entries(x)) {\n        if (v.name === term) {\n          window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n        }\n      }\n    }));\n  }\n  basicSearch(term) {\n    let results = this.http.get(`${this.pokemonByNameUrl}/?name=${term}`);\n    return results;\n  }\n  getPokemonColor() {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n    let types = [];\n    let PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n    return this.http.get(PokemonTypesUrl).pipe(map(data => {\n      // console.log(data.results);\n      data.results.forEach((itemsV, innerIdx) => {\n        // console.log(itemsV.name);\n        types.push({\n          name: itemsV.name,\n          color: colors[innerIdx]\n        });\n      });\n      return types;\n    }), catchError(this.handleError(`something went wrong`)));\n  }\n  // getPokemonColour2(type: string): any {\n  //   var colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green',\n  //     'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red',\n  //     'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n  //   let pokemoTypes: { type: string; color: string }[] = [];\n  //   this.getPokemonTypes().forEach(item => {\n  //     for (const [key, value] of Object.entries(item.results)) {\n  //       if (value.name === type) {\n  //       }\n  //     }\n  //   });\n  // }\n  getMovesForStatusDamageClass() {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/1/`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForPhysicalDamageClass() {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/2/`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForSpecialDamageClass() {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/3/`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getPokemonSpecie(id) {\n    const url = `${this.pokemonSpecieUrl}/${id}`;\n    let pokemonEvolutionId;\n    return this.http.get(url).pipe(map(data => {\n      // console.log(data.results);\n      pokemonEvolutionId = Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n      return pokemonEvolutionId;\n    }), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getEvolutionDetails(id) {\n    const url = `${this.pokemonEvolutionsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon evolution id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  log(message) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n  static #_ = this.ɵfac = function PokemonCRUDService_Factory(t) {\n    return new (t || PokemonCRUDService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonCRUDService,\n    factory: PokemonCRUDService.ɵfac,\n    providedIn: 'root'\n  });\n}\nfunction forkJoin(arg0) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","PokemonCRUDService","constructor","http","messageService","route","headers","getPokemons","pokemonsUrl","replace","get","getTotalNumberOfPokemons","count","pipe","pokemonsCount","h","outcome","handleError","getSearchedPokemon","term","trim","pokemonByNameUrl","subscribe","response","window","location","href","origin","id","getPokemonTypes","PokemonTypesUrl","getPokemonImg","Id","imgUrl","no","getPokemon","k","v","Object","entries","sprites","getPokemonImage","pokemonUrl","forEach","item","previousButton","previous","results","childrenEntry","list","push","Number","url","split","length","name","_","log","getPokemonLast","x","pokemon","front_default","getPokemonIdByName","searchPokemons","basicSearch","getPokemonColor","colors","types","data","itemsV","innerIdx","color","getMovesForStatusDamageClass","getMovesForPhysicalDamageClass","getMovesForSpecialDamageClass","getPokemonSpecie","pokemonSpecieUrl","pokemonEvolutionId","evolution_chain","getEvolutionDetails","pokemonEvolutionsUrl","operation","result","error","console","message","add","factory","providedIn","forkJoin","arg0","Error"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/service/pokemon-crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { Pokemon, PokemonAbilities, PokemonDamage, PokemonEvolution, Pokemons } from '../model/pokemon.model';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PokemonCRUDService {\n\n  private pokemonsUrl = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=20';\n  private pokemonByNameUrl = 'https://pokeapi.co/api/v2/pokemon'\n  private pokemonSpecieUrl = 'https://pokeapi.co/api/v2/pokemon-species';\n  private pokemonEvolutionsUrl = 'https://pokeapi.co/api/v2/evolution-chain';\n  private pokemonsCount!: Pokemons;\n  private pokemonImg: any;\n  private results: { pokemonsTotal: any }[] = [];\n  private res!: number;\n  public list: {\n   id: number, name: string; url: string, sprites: any \n}[] = [];\n  private pokemoTypes: { type: string; color: string }[] = [];\n  public bb: [] = [];\n  public previousButton: any;\n  public nextButton: any;\n  public pokemon!: Pokemon;\n  public infodata: {sprites: string}[] = [];\n\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  back_default: any;\n\n\n  constructor(private http: HttpClient, private messageService: MessageService, private route: ActivatedRoute) { }\n\n  getPokemons(pokemonsUrl: string): Observable<Pokemon> {\n    pokemonsUrl = pokemonsUrl.replace('http://localhost:4200/%22','');\n    return this.http.get<Pokemon>(pokemonsUrl);\n  }\n\n  getTotalNumberOfPokemons(): Observable<any> {\n    let count = 0;\n    return this.http.get<Pokemons>(`https://pokeapi.co/api/v2/pokemon`)\n      .pipe(\n        map(pokemonsCount => pokemonsCount['count']), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n        }),\n        catchError(this.handleError<Pokemon[]>('getTotalNumberOfPokemons', []))\n      );\n  }\n\n  getSearchedPokemon(term: string): void {\n    if (!term.trim()) {\n      return;\n    }\n\n    this.http.get<Pokemon>(`${this.pokemonByNameUrl}/${term}`).subscribe(\n      response => {\n        \n        if(response){\n          window.location.href =  window.location.origin + '/details/' +  `${response.id}`;\n        }\n        \n      },\n      catchError(this.handleError<Pokemon[]>('getSearchedPokemon', []))\n    );\n  }\n\n  getPokemonTypes() {\n    var PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n    return this.http.get<Pokemon>(PokemonTypesUrl);\n  }\n\n  getPokemonImg(Id: number): any {\n    let imgUrl = '';\n    let no = 0;\n\n    this.getTotalNumberOfPokemons().subscribe(\n      (response) => {\n        no = response;\n        //console.log(response);\n      }\n    )\n\n    this.getPokemon(Id).subscribe(\n      response => {\n        for (const [k, v] of Object.entries(response.sprites)) {\n          if (k === 'front_default') {\n            imgUrl = v;\n          }\n        }\n      },\n      catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n    );\n\n    return imgUrl;\n\n  }\n\n  getPokemonImage(pokemonUrl: string | null): any {\n\n    if(!pokemonUrl){\n      pokemonUrl =  this.pokemonsUrl;\n    }\n\n    this.getPokemons(pokemonUrl).forEach(item => {\n      this.previousButton = item.previous\n      item.results.forEach(childrenEntry => {\n        this.list.push(\n          {\n            id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]),\n            name: childrenEntry.name,\n            url: childrenEntry.url,\n            sprites: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' + \n              Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]) + \n              '.png'\n        });\n      });\n    });\n\n    return this.list;\n  }\n\n\n  getPokemon(id: number): Observable<Pokemon> {\n    const url = `${this.pokemonByNameUrl}/${id}`;\n    return this.http.get<Pokemon>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon id=${id}`)),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n  getPokemonLast(id: number): Observable<Pokemon> {\n    const url = `${this.pokemonByNameUrl}/${id}`;\n    return this.http.get<Pokemon>(url).pipe(\n      tap(x => {\n        this.pokemon.sprites.front_default;\n      }),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n\n  getPokemonIdByName(name: string): number | undefined | null {\n    if (!name.trim()) {\n      return null;\n    }\n\n    this.http.get<Pokemon>(`${this.pokemonByNameUrl}/${name}`).subscribe(\n      response => {\n        for (const [k, v] of Object.entries(response)) {\n          if (v.name === name) {\n            window.location.href = `${this.pokemonByNameUrl}/${name}`;\n\n            return v.id;\n          }\n        }\n      },\n      catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n    );\n\n    return;\n  }\n\n  searchPokemons(term: string): Observable<Pokemon[]> {\n\n    if (!term.trim()) {\n\n      return of([]);\n    }\n    return this.http.get<Pokemon[]>(`${this.pokemonByNameUrl}/${term}`).pipe(\n      tap(\n        (x) => {\n          for (const [k, v] of Object.entries(x)) {\n            if (v.name === term) {\n              window.location.href = 'https://pokeapi.co/api/v2/pokemon/' + term;\n            }\n          }\n        }\n      ));\n  }\n\n  basicSearch(term: string): any {\n    let results = this.http.get<Pokemon>(`${this.pokemonByNameUrl}/?name=${term}`);\n\n    return results;\n  }\n\n  getPokemonColor(): any \n  {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \n      'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n      'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n    let types: { name: string; color: string}[] = [];\n\n    let PokemonTypesUrl = 'https://pokeapi.co/api/v2/type';\n\n    return this.http.get(PokemonTypesUrl).\n      pipe(\n        map((data: any) => {\n          // console.log(data.results);\n          data.results.forEach((itemsV: any, innerIdx: any) =>{\n            // console.log(itemsV.name);\n\n            types.push(\n                {\n                  name: itemsV.name,\n                  color: colors[innerIdx]\n                }\n            );            \n          });\n\n          return types;\n        }), catchError(this.handleError<Pokemon>(`something went wrong`))\n      )\n  }\n\n  // getPokemonColour2(type: string): any {\n  //   var colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green',\n  //     'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red',\n  //     'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n  //   let pokemoTypes: { type: string; color: string }[] = [];\n\n  //   this.getPokemonTypes().forEach(item => {\n  //     for (const [key, value] of Object.entries(item.results)) {\n  //       if (value.name === type) {\n\n  //       }\n\n  //     }\n  //   });\n  // }\n\n  getMovesForStatusDamageClass() : Observable<PokemonDamage> {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/1/`;\n    return this.http.get<PokemonDamage>(url).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForPhysicalDamageClass() : Observable<PokemonDamage> {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/2/`;\n    return this.http.get<PokemonDamage>(url).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForSpecialDamageClass() : Observable<any> {\n    const url = `https://pokeapi.co/api/v2/move-damage-class/3/`;\n    return this.http.get<PokemonDamage>(url).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getPokemonSpecie(id: number): Observable<any> {\n    const url = `${this.pokemonSpecieUrl}/${id}`;\n    let pokemonEvolutionId: Number;\n    return this.http.get<any>(url)\n    .pipe(\n      map((data: any) => {\n        // console.log(data.results);\n        pokemonEvolutionId =  Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n\n        return pokemonEvolutionId;\n      }),  catchError(this.handleError<any>(`getPokemon id=${id}`))\n    )\n  }\n\n  getEvolutionDetails(id: number): Observable<PokemonEvolution> {\n    const url = `${this.pokemonEvolutionsUrl}/${id}`;\n    return this.http.get<PokemonEvolution>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon evolution id=${id}`)),\n      catchError(this.handleError<PokemonEvolution>(`getPokemon id=${id}`))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n}\nfunction forkJoin(arg0: any[]) {\n  throw new Error('Function not implemented.');\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}