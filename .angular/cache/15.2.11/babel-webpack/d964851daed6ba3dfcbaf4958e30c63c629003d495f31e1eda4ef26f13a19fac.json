{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./loading.service\";\n/**\n * This class is for intercepting http requests. When a request starts, we set the loadingSub property\n * in the LoadingService to true. Once the request completes and we have a response, set the loadingSub\n * property to false. If an error occurs while servicing the request, set the loadingSub property to false.\n * @class {HttpRequestInterceptor}\n */\nexport class HttpRequestInterceptor {\n  constructor(_loading) {\n    this._loading = _loading;\n  }\n  // intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  //   this._loading.setLoading(true, req.url);\n  //   return next.handle(req).((res: any) => {\n  //     if(res){\n  //       this._loading.setLoading(false, req.url)\n  //     }\n  //   });\n  // }\n  intercept(request, next) {\n    this._loading.setLoading(true, request.url);\n    return next.handle(request).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        // handle http errors here, maybe retry, update headers, etc..\n        // return of({success: false});\n        this._loading.setLoading(false, request.url);\n        console.log(err);\n        // return err;\n      }\n      // this error is unexpected, we don't know what to do\n      // let the app interceptor handle it, but upstream observables\n      // won't know what to do either. Our app has crashed...\n      // You can return success false, but why handle this error?\n      return throwError(err);\n    })\n    // catchError((err: HttpErrorResponse) => {\n    // this._loading.setLoading(false, request.url);\n    // return err;\n    // })\n    ).pipe(map(event => {\n      if (event instanceof HttpResponse) {\n        this._loading.setLoading(false, request.url);\n      }\n      return event;\n    }));\n  }\n  static #_ = this.ɵfac = function HttpRequestInterceptor_Factory(t) {\n    return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.LoadingService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpRequestInterceptor,\n    factory: HttpRequestInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAEEA,YAAY,EAIZC,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;;;AAK9C;;;;;;AAOA,OAAM,MAAOC,sBAAsB;EAEjCC,YACUC,QAAwB;IAAxB,aAAQ,GAARA,QAAQ;EACd;EAEJ;EACA;EACA;EAGA;EACA;EACA;EAEA;EACA;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAI,CAACH,QAAQ,CAACI,UAAU,CAAC,IAAI,EAAEF,OAAO,CAACG,GAAG,CAAC;IAC3C,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC,CACxBK,IAAI,CAGHX,UAAU,CAACY,GAAG,IAAG;MACb,IAAGA,GAAG,YAAYd,iBAAiB,EAAE;QACjC;QACA;QACA,IAAI,CAACM,QAAQ,CAACI,UAAU,CAAC,KAAK,EAAEF,OAAO,CAACG,GAAG,CAAC;QAC5CI,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB;;MAEJ;MACA;MACA;MACA;MACA,OAAOb,UAAU,CAACa,GAAG,CAAC;IAC1B,CAAC;IAED;IACA;IACA;IACA;IAAA,CACD,CACAD,IAAI,CAACV,GAAG,CAAuBc,KAAqB,IAAI;MACvD,IAAIA,KAAK,YAAYlB,YAAY,EAAE;QACjC,IAAI,CAACO,QAAQ,CAACI,UAAU,CAAC,KAAK,EAAEF,OAAO,CAACG,GAAG,CAAC;;MAE9C,OAAOM,KAAK;IACd,CAAC,CAAC,CAAC;EACP;EAAC;qBAlDUb,sBAAsB;EAAA;EAAA;WAAtBA,sBAAsB;IAAAc,SAAtBd,sBAAsB;EAAA","names":["HttpResponse","HttpErrorResponse","throwError","catchError","map","HttpRequestInterceptor","constructor","_loading","intercept","request","next","setLoading","url","handle","pipe","err","console","log","event","factory"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/request-interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpResponse,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport {catchError, map} from 'rxjs/operators'\n// import {catchError, map} from 'rxjs'\n\nimport { LoadingService } from './loading.service';\n\n/**\n * This class is for intercepting http requests. When a request starts, we set the loadingSub property\n * in the LoadingService to true. Once the request completes and we have a response, set the loadingSub\n * property to false. If an error occurs while servicing the request, set the loadingSub property to false.\n * @class {HttpRequestInterceptor}\n */\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n  constructor(\n    private _loading: LoadingService\n  ) { }\n\n  // intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  //   this._loading.setLoading(true, req.url);\n  //   return next.handle(req).((res: any) => {\n\n    \n  //     if(res){\n  //       this._loading.setLoading(false, req.url)\n  //     }\n      \n  //   });\n  // }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this._loading.setLoading(true, request.url);\n    return next.handle(request)\n      .pipe(\n        \n        \n        catchError(err => {\n            if(err instanceof HttpErrorResponse) {\n                // handle http errors here, maybe retry, update headers, etc..\n                // return of({success: false});\n                this._loading.setLoading(false, request.url);\n                console.log(err);\n                // return err;\n            }\n            // this error is unexpected, we don't know what to do\n            // let the app interceptor handle it, but upstream observables\n            // won't know what to do either. Our app has crashed...\n            // You can return success false, but why handle this error?\n            return throwError(err);\n        })\n        \n        // catchError((err: HttpErrorResponse) => {\n        // this._loading.setLoading(false, request.url);\n        // return err;\n        // })\n      )\n      .pipe(map<HttpEvent<any>, any>((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          this._loading.setLoading(false, request.url);\n        }\n        return event;\n      }));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}