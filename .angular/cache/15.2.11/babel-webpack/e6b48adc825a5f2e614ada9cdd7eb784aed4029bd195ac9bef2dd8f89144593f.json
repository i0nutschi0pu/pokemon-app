{"ast":null,"code":"import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport * as i0 from \"@angular/core\";\nexport class LoadingService {\n  constructor() {\n    this.loadingSub = new BehaviorSubject(false);\n    /**\n     * Contains in-progress loading requests\n     */\n    this.loadingMap = new Map();\n  }\n  /**\n   * Sets the loadingSub property value based on the following:\n   * - If loading is true, add the provided url to the loadingMap with a true value, set loadingSub value to true\n   * - If loading is false, remove the loadingMap entry and only when the map is empty will we set loadingSub to false\n   * This pattern ensures if there are multiple requests awaiting completion, we don't set loading to false before\n   * other requests have completed. At the moment, this function is only called from the @link{HttpRequestInterceptor}\n   * @param loading {boolean}\n   * @param url {string}\n   */\n  setLoading(loading, url) {\n    if (!url) {\n      throw new Error('The request URL must be provided to the LoadingService.setLoading function');\n    }\n    console.log(url);\n    if (loading === true) {\n      this.loadingMap.set(url, loading);\n      this.loadingSub.next(true);\n    } else if (loading === false && this.loadingMap.has(url)) {\n      this.loadingMap.delete(url);\n    }\n    if (this.loadingMap.size === 0) {\n      this.loadingSub.next(false);\n    }\n  }\n  static #_ = this.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,+BAA+B;;AAK/D,OAAM,MAAOC,cAAc;EAQzBC;IANA,eAAU,GAA6B,IAAIF,eAAe,CAAU,KAAK,CAAC;IAC1E;;;IAGA,eAAU,GAAyB,IAAIG,GAAG,EAAmB;EAE7C;EAEhB;;;;;;;;;EASAC,UAAU,CAACC,OAAgB,EAAEC,GAAW;IACtC,IAAI,CAACA,GAAG,EAAE;MACR,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;;IAE/FC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;IAChB,IAAID,OAAO,KAAK,IAAI,EAAE;MACpB,IAAI,CAACK,UAAU,CAACC,GAAG,CAACL,GAAG,EAAED,OAAO,CAAC;MACjC,IAAI,CAACO,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;KAC3B,MAAK,IAAIR,OAAO,KAAK,KAAK,IAAI,IAAI,CAACK,UAAU,CAACI,GAAG,CAACR,GAAG,CAAC,EAAE;MACvD,IAAI,CAACI,UAAU,CAACK,MAAM,CAACT,GAAG,CAAC;;IAE7B,IAAI,IAAI,CAACI,UAAU,CAACM,IAAI,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACJ,UAAU,CAACC,IAAI,CAAC,KAAK,CAAC;;EAE/B;EAAC;qBAjCUZ,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAgB,SAAdhB,cAAc;IAAAiB,YAFb;EAAM","names":["BehaviorSubject","LoadingService","constructor","Map","setLoading","loading","url","Error","console","log","loadingMap","set","loadingSub","next","has","delete","size","factory","providedIn"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/loading.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  loadingSub: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  /**\n   * Contains in-progress loading requests\n   */\n  loadingMap: Map<string, boolean> = new Map<string, boolean>();\n\n  constructor() { }\n\n  /**\n   * Sets the loadingSub property value based on the following:\n   * - If loading is true, add the provided url to the loadingMap with a true value, set loadingSub value to true\n   * - If loading is false, remove the loadingMap entry and only when the map is empty will we set loadingSub to false\n   * This pattern ensures if there are multiple requests awaiting completion, we don't set loading to false before\n   * other requests have completed. At the moment, this function is only called from the @link{HttpRequestInterceptor}\n   * @param loading {boolean}\n   * @param url {string}\n   */\n  setLoading(loading: boolean, url: string): void {\n    if (!url) {\n      throw new Error('The request URL must be provided to the LoadingService.setLoading function');\n    }\n    console.log(url);\n    if (loading === true) {\n      this.loadingMap.set(url, loading);\n      this.loadingSub.next(true);\n    }else if (loading === false && this.loadingMap.has(url)) {\n      this.loadingMap.delete(url);\n    }\n    if (this.loadingMap.size === 0) {\n      this.loadingSub.next(false);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}