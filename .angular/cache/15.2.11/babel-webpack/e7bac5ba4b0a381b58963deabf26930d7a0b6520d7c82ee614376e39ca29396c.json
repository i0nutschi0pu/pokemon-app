{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"overlay\"];\nfunction NgxSpinnerComponent_div_0_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\nfunction NgxSpinnerComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_div_2_div_1_Template, 1, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.spinner.class);\n    i0.ɵɵstyleProp(\"color\", ctx_r2.spinner.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.spinner.divArray);\n  }\n}\nfunction NgxSpinnerComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r3.template), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵtemplate(2, NgxSpinnerComponent_div_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵtemplate(3, NgxSpinnerComponent_div_0_div_3_Template, 2, 3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\");\n    i0.ɵɵproperty(\"@.disabled\", ctx_r0.disableAnimation)(\"@fadeIn\", \"in\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"z-index\", ctx_r0.spinner.zIndex);\n  }\n}\nconst _c1 = [\"*\"];\nconst LOADERS = {\n  \"ball-8bits\": 16,\n  \"ball-atom\": 4,\n  \"ball-beat\": 3,\n  \"ball-circus\": 5,\n  \"ball-climbing-dot\": 4,\n  \"ball-clip-rotate\": 1,\n  \"ball-clip-rotate-multiple\": 2,\n  \"ball-clip-rotate-pulse\": 2,\n  \"ball-elastic-dots\": 5,\n  \"ball-fall\": 3,\n  \"ball-fussion\": 4,\n  \"ball-grid-beat\": 9,\n  \"ball-grid-pulse\": 9,\n  \"ball-newton-cradle\": 4,\n  \"ball-pulse\": 3,\n  \"ball-pulse-rise\": 5,\n  \"ball-pulse-sync\": 3,\n  \"ball-rotate\": 1,\n  \"ball-running-dots\": 5,\n  \"ball-scale\": 1,\n  \"ball-scale-multiple\": 3,\n  \"ball-scale-pulse\": 2,\n  \"ball-scale-ripple\": 1,\n  \"ball-scale-ripple-multiple\": 3,\n  \"ball-spin\": 8,\n  \"ball-spin-clockwise\": 8,\n  \"ball-spin-clockwise-fade\": 8,\n  \"ball-spin-clockwise-fade-rotating\": 8,\n  \"ball-spin-fade\": 8,\n  \"ball-spin-fade-rotating\": 8,\n  \"ball-spin-rotate\": 2,\n  \"ball-square-clockwise-spin\": 8,\n  \"ball-square-spin\": 8,\n  \"ball-triangle-path\": 3,\n  \"ball-zig-zag\": 2,\n  \"ball-zig-zag-deflect\": 2,\n  cog: 1,\n  \"cube-transition\": 2,\n  fire: 3,\n  \"line-scale\": 5,\n  \"line-scale-party\": 5,\n  \"line-scale-pulse-out\": 5,\n  \"line-scale-pulse-out-rapid\": 5,\n  \"line-spin-clockwise-fade\": 8,\n  \"line-spin-clockwise-fade-rotating\": 8,\n  \"line-spin-fade\": 8,\n  \"line-spin-fade-rotating\": 8,\n  pacman: 6,\n  \"square-jelly-box\": 2,\n  \"square-loader\": 1,\n  \"square-spin\": 1,\n  timer: 1,\n  \"triangle-skew-spin\": 1\n};\nconst DEFAULTS = {\n  BD_COLOR: \"rgba(51,51,51,0.8)\",\n  SPINNER_COLOR: \"#fff\",\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n  static create(init) {\n    if (init?.type == null || init.type.length === 0) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n    return new NgxSpinner(init);\n  }\n}\nclass NgxSpinnerService {\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {\n    /**\n     * Spinner observable\n     *\n     * @memberof NgxSpinnerService\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\n   * Get subscription of desired spinner\n   * @memberof NgxSpinnerService\n   **/\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name = PRIMARY_SPINNER, spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner[\"name\"] = name;\n          this.spinnerObservable.next(new NgxSpinner({\n            ...spinner,\n            show: true\n          }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n   * To hide spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n}\nNgxSpinnerService.ɵfac = function NgxSpinnerService_Factory(t) {\n  return new (t || NgxSpinnerService)();\n};\nNgxSpinnerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxSpinnerService,\n  factory: NgxSpinnerService.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\nSafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) {\n  return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\nSafeHtmlPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"safeHtml\",\n  type: SafeHtmlPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"safeHtml\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\nclass NgxSpinnerComponent {\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    this.globalConfig = globalConfig;\n    /**\n     * To enable/disable animation\n     *\n     * @type {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    this.disableAnimation = false;\n    /**\n     * Spinner Object\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.spinner = new NgxSpinner();\n    /**\n     * Unsubscribe from spinner's observable\n     *\n     * @memberof NgxSpinnerComponent\n     **/\n    this.ngUnsubscribe = new Subject();\n    /**\n     * To set default ngx-spinner options\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    this.setDefaultOptions = () => {\n      const {\n        type\n      } = this.globalConfig ?? {};\n      this.spinner = NgxSpinner.create({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type ?? type,\n        fullScreen: this.fullScreen,\n        divArray: this.divArray,\n        divCount: this.divCount,\n        show: this.show,\n        zIndex: this.zIndex,\n        template: this.template,\n        showSpinner: this.showSpinner\n      });\n    };\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = \"large\";\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  handleKeyboardEvent(event) {\n    if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n      if (this.fullScreen || !this.fullScreen && this.isSpinnerZone(event.target)) {\n        event.returnValue = false;\n        event.preventDefault();\n      }\n    }\n  }\n  initObservable() {\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n      if (spinner.show) {\n        this.onInputChange();\n      }\n      this.changeDetector.detectChanges();\n    });\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  isSpinnerZone(element) {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== \"undefined\" && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== \"\") {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === \"showSpinner\") {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n            if (propName === \"name\") {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type, size) {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n    let sizeClass = \"\";\n    switch (size.toLowerCase()) {\n      case \"small\":\n        sizeClass = \"la-sm\";\n        break;\n      case \"medium\":\n        sizeClass = \"la-2x\";\n        break;\n      case \"large\":\n        sizeClass = \"la-3x\";\n        break;\n      default:\n        break;\n    }\n    return \"la-\" + type + \" \" + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\nNgxSpinnerComponent.ɵfac = function NgxSpinnerComponent_Factory(t) {\n  return new (t || NgxSpinnerComponent)(i0.ɵɵdirectiveInject(NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NGX_SPINNER_CONFIG, 8));\n};\nNgxSpinnerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxSpinnerComponent,\n  selectors: [[\"ngx-spinner\"]],\n  viewQuery: function NgxSpinnerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDOM = _t.first);\n    }\n  },\n  hostBindings: function NgxSpinnerComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NgxSpinnerComponent_keydown_HostBindingHandler($event) {\n        return ctx.handleKeyboardEvent($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    bdColor: \"bdColor\",\n    size: \"size\",\n    color: \"color\",\n    type: \"type\",\n    fullScreen: \"fullScreen\",\n    name: \"name\",\n    zIndex: \"zIndex\",\n    template: \"template\",\n    showSpinner: \"showSpinner\",\n    disableAnimation: \"disableAnimation\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"ngx-spinner-overlay\", 3, \"background-color\", \"z-index\", \"position\", 4, \"ngIf\"], [1, \"ngx-spinner-overlay\"], [\"overlay\", \"\"], [3, \"class\", \"color\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [1, \"loading-text\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"]],\n  template: function NgxSpinnerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 6, 12, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.spinner.show);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, SafeHtmlPipe],\n  styles: [\".ngx-spinner-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text[_ngcontent-%COMP%]{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\"],\n  data: {\n    animation: [trigger(\"fadeIn\", [state(\"in\", style({\n      opacity: 1\n    })), transition(\":enter\", [style({\n      opacity: 0\n    }), animate(300)]), transition(\":leave\", animate(200, style({\n      opacity: 0\n    })))])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-spinner\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger(\"fadeIn\", [state(\"in\", style({\n        opacity: 1\n      })), transition(\":enter\", [style({\n        opacity: 0\n      }), animate(300)]), transition(\":leave\", animate(200, style({\n        opacity: 0\n      })))])],\n      template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\",\n      styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_SPINNER_CONFIG]\n      }]\n    }];\n  }, {\n    bdColor: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    showSpinner: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    spinnerDOM: [{\n      type: ViewChild,\n      args: [\"overlay\"]\n    }],\n    handleKeyboardEvent: [{\n      type: HostListener,\n      args: [\"document:keydown\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxSpinnerModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSpinnerModule,\n      providers: [{\n        provide: NGX_SPINNER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\nNgxSpinnerModule.ɵfac = function NgxSpinnerModule_Factory(t) {\n  return new (t || NgxSpinnerModule)();\n};\nNgxSpinnerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxSpinnerModule\n});\nNgxSpinnerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Pipe","Component","ChangeDetectionStrategy","Optional","Inject","Input","ViewChild","HostListener","NgModule","BehaviorSubject","Subject","filter","takeUntil","trigger","state","style","transition","animate","i2","CommonModule","i1","LOADERS","cog","fire","pacman","timer","DEFAULTS","BD_COLOR","SPINNER_COLOR","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","create","type","length","console","warn","NgxSpinnerService","spinnerObservable","getSpinner","name","asObservable","pipe","x","show","spinner","Promise","resolve","_reject","setTimeout","keys","next","hide","debounce","ɵfac","ɵprov","args","providedIn","NGX_SPINNER_CONFIG","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","DomSanitizer","ɵpipe","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","globalConfig","disableAnimation","ngUnsubscribe","setDefaultOptions","bdColor","size","color","fullScreen","divArray","divCount","zIndex","template","showSpinner","handleKeyboardEvent","event","spinnerDOM","nativeElement","isSpinnerZone","target","returnValue","preventDefault","initObservable","subscribe","onInputChange","detectChanges","ngOnInit","element","parentElement","parentNode","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","_","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","ChangeDetectorRef","ElementRef","ɵcmp","NgForOf","NgIf","opacity","selector","changeDetection","OnPush","animations","styles","undefined","decorators","NgxSpinnerModule","forRoot","config","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports"],"sources":["/Users/ionut/pokemon_app/node_modules/ngx-spinner/fesm2020/ngx-spinner.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nconst LOADERS = {\n    \"ball-8bits\": 16,\n    \"ball-atom\": 4,\n    \"ball-beat\": 3,\n    \"ball-circus\": 5,\n    \"ball-climbing-dot\": 4,\n    \"ball-clip-rotate\": 1,\n    \"ball-clip-rotate-multiple\": 2,\n    \"ball-clip-rotate-pulse\": 2,\n    \"ball-elastic-dots\": 5,\n    \"ball-fall\": 3,\n    \"ball-fussion\": 4,\n    \"ball-grid-beat\": 9,\n    \"ball-grid-pulse\": 9,\n    \"ball-newton-cradle\": 4,\n    \"ball-pulse\": 3,\n    \"ball-pulse-rise\": 5,\n    \"ball-pulse-sync\": 3,\n    \"ball-rotate\": 1,\n    \"ball-running-dots\": 5,\n    \"ball-scale\": 1,\n    \"ball-scale-multiple\": 3,\n    \"ball-scale-pulse\": 2,\n    \"ball-scale-ripple\": 1,\n    \"ball-scale-ripple-multiple\": 3,\n    \"ball-spin\": 8,\n    \"ball-spin-clockwise\": 8,\n    \"ball-spin-clockwise-fade\": 8,\n    \"ball-spin-clockwise-fade-rotating\": 8,\n    \"ball-spin-fade\": 8,\n    \"ball-spin-fade-rotating\": 8,\n    \"ball-spin-rotate\": 2,\n    \"ball-square-clockwise-spin\": 8,\n    \"ball-square-spin\": 8,\n    \"ball-triangle-path\": 3,\n    \"ball-zig-zag\": 2,\n    \"ball-zig-zag-deflect\": 2,\n    cog: 1,\n    \"cube-transition\": 2,\n    fire: 3,\n    \"line-scale\": 5,\n    \"line-scale-party\": 5,\n    \"line-scale-pulse-out\": 5,\n    \"line-scale-pulse-out-rapid\": 5,\n    \"line-spin-clockwise-fade\": 8,\n    \"line-spin-clockwise-fade-rotating\": 8,\n    \"line-spin-fade\": 8,\n    \"line-spin-fade-rotating\": 8,\n    pacman: 6,\n    \"square-jelly-box\": 2,\n    \"square-loader\": 1,\n    \"square-spin\": 1,\n    timer: 1,\n    \"triangle-skew-spin\": 1,\n};\nconst DEFAULTS = {\n    BD_COLOR: \"rgba(51,51,51,0.8)\",\n    SPINNER_COLOR: \"#fff\",\n    Z_INDEX: 99999,\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n    constructor(init) {\n        Object.assign(this, init);\n    }\n    static create(init) {\n        if (init?.type == null || init.type.length === 0) {\n            console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n        }\n        return new NgxSpinner(init);\n    }\n}\n\nclass NgxSpinnerService {\n    /**\n     * Creates an instance of NgxSpinnerService.\n     * @memberof NgxSpinnerService\n     */\n    constructor() {\n        /**\n         * Spinner observable\n         *\n         * @memberof NgxSpinnerService\n         */\n        // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n        this.spinnerObservable = new BehaviorSubject(null);\n    }\n    /**\n     * Get subscription of desired spinner\n     * @memberof NgxSpinnerService\n     **/\n    getSpinner(name) {\n        return this.spinnerObservable\n            .asObservable()\n            .pipe(filter((x) => x && x.name === name));\n    }\n    /**\n     * To show spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    show(name = PRIMARY_SPINNER, spinner) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                if (spinner && Object.keys(spinner).length) {\n                    spinner[\"name\"] = name;\n                    this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n                    resolve(true);\n                }\n                else {\n                    this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n                    resolve(true);\n                }\n            }, 10);\n        });\n    }\n    /**\n     * To hide spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    hide(name = PRIMARY_SPINNER, debounce = 10) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n                resolve(true);\n            }, debounce);\n        });\n    }\n}\nNgxSpinnerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxSpinnerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerService, providedIn: \"root\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\",\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\n\nclass SafeHtmlPipe {\n    constructor(_sanitizer) {\n        this._sanitizer = _sanitizer;\n    }\n    transform(v) {\n        if (v) {\n            return this._sanitizer.bypassSecurityTrustHtml(v);\n        }\n    }\n}\nSafeHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SafeHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\nSafeHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: SafeHtmlPipe, name: \"safeHtml\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: SafeHtmlPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"safeHtml\",\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass NgxSpinnerComponent {\n    /**\n     * Creates an instance of NgxSpinnerComponent.\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n        this.spinnerService = spinnerService;\n        this.changeDetector = changeDetector;\n        this.elementRef = elementRef;\n        this.globalConfig = globalConfig;\n        /**\n         * To enable/disable animation\n         *\n         * @type {boolean}\n         * @memberof NgxSpinnerComponent\n         */\n        this.disableAnimation = false;\n        /**\n         * Spinner Object\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.spinner = new NgxSpinner();\n        /**\n         * Unsubscribe from spinner's observable\n         *\n         * @memberof NgxSpinnerComponent\n         **/\n        this.ngUnsubscribe = new Subject();\n        /**\n         * To set default ngx-spinner options\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.setDefaultOptions = () => {\n            const { type } = this.globalConfig ?? {};\n            this.spinner = NgxSpinner.create({\n                name: this.name,\n                bdColor: this.bdColor,\n                size: this.size,\n                color: this.color,\n                type: this.type ?? type,\n                fullScreen: this.fullScreen,\n                divArray: this.divArray,\n                divCount: this.divCount,\n                show: this.show,\n                zIndex: this.zIndex,\n                template: this.template,\n                showSpinner: this.showSpinner,\n            });\n        };\n        this.bdColor = DEFAULTS.BD_COLOR;\n        this.zIndex = DEFAULTS.Z_INDEX;\n        this.color = DEFAULTS.SPINNER_COLOR;\n        this.size = \"large\";\n        this.fullScreen = true;\n        this.name = PRIMARY_SPINNER;\n        this.template = null;\n        this.showSpinner = false;\n        this.divArray = [];\n        this.divCount = 0;\n        this.show = false;\n    }\n    handleKeyboardEvent(event) {\n        if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n            if (this.fullScreen ||\n                (!this.fullScreen && this.isSpinnerZone(event.target))) {\n                event.returnValue = false;\n                event.preventDefault();\n            }\n        }\n    }\n    initObservable() {\n        this.spinnerService\n            .getSpinner(this.name)\n            .pipe(takeUntil(this.ngUnsubscribe))\n            .subscribe((spinner) => {\n            this.setDefaultOptions();\n            Object.assign(this.spinner, spinner);\n            if (spinner.show) {\n                this.onInputChange();\n            }\n            this.changeDetector.detectChanges();\n        });\n    }\n    /**\n     * Initialization method\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnInit() {\n        this.setDefaultOptions();\n        this.initObservable();\n    }\n    /**\n     * To check event triggers inside the Spinner Zone\n     *\n     * @param {*} element\n     * @returns {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    isSpinnerZone(element) {\n        if (element === this.elementRef.nativeElement.parentElement) {\n            return true;\n        }\n        return element.parentNode && this.isSpinnerZone(element.parentNode);\n    }\n    /**\n     * On changes event for input variables\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnChanges(changes) {\n        for (const propName in changes) {\n            if (propName) {\n                const changedProp = changes[propName];\n                if (changedProp.isFirstChange()) {\n                    return;\n                }\n                else if (typeof changedProp.currentValue !== \"undefined\" &&\n                    changedProp.currentValue !== changedProp.previousValue) {\n                    if (changedProp.currentValue !== \"\") {\n                        this.spinner[propName] = changedProp.currentValue;\n                        if (propName === \"showSpinner\") {\n                            if (changedProp.currentValue) {\n                                this.spinnerService.show(this.spinner.name, this.spinner);\n                            }\n                            else {\n                                this.spinnerService.hide(this.spinner.name);\n                            }\n                        }\n                        if (propName === \"name\") {\n                            this.initObservable();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To get class for spinner\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    getClass(type, size) {\n        this.spinner.divCount = LOADERS[type];\n        this.spinner.divArray = Array(this.spinner.divCount)\n            .fill(0)\n            .map((_, i) => i);\n        let sizeClass = \"\";\n        switch (size.toLowerCase()) {\n            case \"small\":\n                sizeClass = \"la-sm\";\n                break;\n            case \"medium\":\n                sizeClass = \"la-2x\";\n                break;\n            case \"large\":\n                sizeClass = \"la-3x\";\n                break;\n            default:\n                break;\n        }\n        return \"la-\" + type + \" \" + sizeClass;\n    }\n    /**\n     * Check if input variables have changed\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    onInputChange() {\n        this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n    }\n    /**\n     * Component destroy event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnDestroy() {\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n}\nNgxSpinnerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerComponent, deps: [{ token: NgxSpinnerService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: NGX_SPINNER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nNgxSpinnerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: NgxSpinnerComponent, selector: \"ngx-spinner\", inputs: { bdColor: \"bdColor\", size: \"size\", color: \"color\", type: \"type\", fullScreen: \"fullScreen\", name: \"name\", zIndex: \"zIndex\", template: \"template\", showSpinner: \"showSpinner\", disableAnimation: \"disableAnimation\" }, host: { listeners: { \"document:keydown\": \"handleKeyboardEvent($event)\" } }, viewQueries: [{ propertyName: \"spinnerDOM\", first: true, predicate: [\"overlay\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: SafeHtmlPipe, name: \"safeHtml\" }], animations: [\n        trigger(\"fadeIn\", [\n            state(\"in\", style({ opacity: 1 })),\n            transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n            transition(\":leave\", animate(200, style({ opacity: 0 }))),\n        ]),\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-spinner\", changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger(\"fadeIn\", [\n                            state(\"in\", style({ opacity: 1 })),\n                            transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n                            transition(\":leave\", animate(200, style({ opacity: 0 }))),\n                        ]),\n                    ], template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgxSpinnerService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NGX_SPINNER_CONFIG]\n                }] }]; }, propDecorators: { bdColor: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], fullScreen: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], zIndex: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], showSpinner: [{\n                type: Input\n            }], disableAnimation: [{\n                type: Input\n            }], spinnerDOM: [{\n                type: ViewChild,\n                args: [\"overlay\"]\n            }], handleKeyboardEvent: [{\n                type: HostListener,\n                args: [\"document:keydown\", [\"$event\"]]\n            }] } });\n\nclass NgxSpinnerModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxSpinnerModule,\n            providers: [{ provide: NGX_SPINNER_CONFIG, useValue: config }],\n        };\n    }\n}\nNgxSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerModule, declarations: [NgxSpinnerComponent, SafeHtmlPipe], imports: [CommonModule], exports: [NgxSpinnerComponent] });\nNgxSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: NgxSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n                    exports: [NgxSpinnerComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}