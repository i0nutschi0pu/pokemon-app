{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../pokemon-crud.service\";\nimport * as i3 from \"../../../helper.service\";\nimport * as i4 from \"@angular/common\";\nfunction PokemonEvolutionComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"h5\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.noPossibleEvolution, \" \");\n  }\n}\nfunction PokemonEvolutionComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 3)(2, \"div\", 4);\n    i0.ɵɵelement(3, \"img\", 5)(4, \"img\", 6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 7)(6, \"h5\", 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"titlecase\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r1.pokemonImg, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\" evolves into \", i0.ɵɵpipeBind1(8, 3, ctx_r1.evolves_to), \" at level \", ctx_r1.evolutionLevel, \"\");\n  }\n}\nexport class PokemonEvolutionComponent {\n  constructor(route, pokemonService, helperService) {\n    this.route = route;\n    this.pokemonService = pokemonService;\n    this.helperService = helperService;\n  }\n  ngOnInit() {\n    this.pokemonService.getPokemonSpecie(this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id'))).subscribe(response => {\n      this.getPokemonEvolution(response, this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id')));\n    });\n  }\n  // getPokemonEvolutionId()\n  // {\n  //   var subject = new Subject<number>();\n  //   let pokemonEvolutionId: number;\n  //   this.pokemonService.getPokemonSpecie(this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id')!)).subscribe(\n  //     response => {\n  //       pokemonEvolutionId = this.helperService.stringExtract(response.evolution_chain.url);\n  //       subject.next(pokemonEvolutionId);\n  //     }\n  //   );\n  //   return subject.asObservable();\n  // }\n  getPokemonImg(Id) {\n    console.log(Id);\n    return this.pokemonImg = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${Id}.png`;\n    // var subject = new Subject<string>();\n    // let pokemonNameEvolution: string;\n    // this.pokemonService.getPokemon(Id).subscribe(\n    //   response => {\n    //     pokemonNameEvolution = response.name;\n    //     subject.next(pokemonNameEvolution);\n    //     this.pokemonName = response.name;\n    //     for (const [k, v] of Object.entries(response.sprites)) {\n    //       if (k === 'front_default') {\n    //         return this.pokemonImg = v;\n    //       }\n    //     }\n    //   }\n    // );\n    // return subject.asObservable();\n  }\n\n  getPokemonEvolution(id, pokemonId) {\n    // var subject = new Subject<number>();\n    let pokemonNameEvolutionId;\n    let secondEvolutionSpecieId;\n    let firstEvolutionSpecieId;\n    let level = 1;\n    this.pokemonService.getEvolutionDetails(id).subscribe(pokemonEvolution => {\n      this.currentSpecie = pokemonEvolution.chain.species.name;\n      // console.log(this.currentSpecie );\n      pokemonEvolution.chain.evolves_to.forEach(lists => {\n        lists.evolves_to.forEach(evols => {\n          // console.log(evols );\n          pokemonNameEvolutionId = this.helperService.stringExtract(evols['species']['url']);\n          secondEvolutionSpecieId = pokemonNameEvolutionId;\n          this.secondEvolutionSpecie = evols['species']['name'];\n          // console.log(secondEvolutionSpecieId);\n        });\n        // first evolution\n        pokemonNameEvolutionId = this.helperService.stringExtract(lists['species']['url']);\n        this.firstEvolutionSpecie = lists['species']['name'];\n        firstEvolutionSpecieId = pokemonNameEvolutionId;\n        // console.log(firstEvolutionSpecieId);\n      });\n      // console.log(this.firstEvolutionSpecie );\n      // console.log(this.secondEvolutionSpecie );\n      if (pokemonId === firstEvolutionSpecieId) {\n        this.evolves_to = this.secondEvolutionSpecie;\n        this.pokemonEvolutionImg = this.getPokemonImg(secondEvolutionSpecieId);\n      } else if (pokemonId === secondEvolutionSpecieId) {\n        this.evolves_to = null;\n        this.noPossibleEvolution = 'There is no evolution possible';\n      } else {\n        this.evolves_to = this.firstEvolutionSpecie;\n        this.pokemonEvolutionImg = this.getPokemonImg(firstEvolutionSpecieId);\n      }\n      // this.evolves_to = pokemonEvolution.chain.evolves_to.species.name;\n      pokemonEvolution.chain.evolves_to.forEach(items => {\n        // console.log(items.evolution_details);\n        items.evolution_details.forEach(details => {\n          // console.log(details.min_level);\n          this.evolutionLevel = details.min_level;\n        });\n      });\n    });\n    //  console.log(subject.asObservable());\n  }\n  static #_ = this.ɵfac = function PokemonEvolutionComponent_Factory(t) {\n    return new (t || PokemonEvolutionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PokemonCRUDService), i0.ɵɵdirectiveInject(i3.HelperService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PokemonEvolutionComponent,\n    selectors: [[\"app-pokemon-evolution\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [1, \"col-12\", \"mt-2\"], [1, \"text-left\"], [1, \"row\"], [1, \"ml-2\"], [\"src\", \"/assets/green-arrow.jpg\", 1, \"imgWH\", \"greenArrow\"], [1, \"imgWH\", \"pl-5\", \"ml-5\", \"pkmImgEvolution\", 3, \"src\"], [1, \"row\", \"mt-2\"], [1, \"text-left\", \"pl-0\", \"col-10\", \"evolutionTxt\"]],\n    template: function PokemonEvolutionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PokemonEvolutionComponent_div_0_Template, 4, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, PokemonEvolutionComponent_div_1_Template, 9, 5, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.noPossibleEvolution);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.noPossibleEvolution);\n      }\n    },\n    dependencies: [i4.NgIf, i4.TitleCasePipe],\n    styles: [\".greenArrow[_ngcontent-%COMP%]{\\n    padding-top: 37px; width: 10%;\\n}\\n\\n.pkmImgEvolution[_ngcontent-%COMP%]{\\n    padding-top: 40px;\\n}\\n\\n.evolutionTxt[_ngcontent-%COMP%]{\\n    margin-left: -60px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wb2tlbW9ucy9wb2tlbW9uLWV2b2x1dGlvbi9wb2tlbW9uLWV2b2x1dGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCLEVBQUUsVUFBVTtBQUNqQzs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi5ncmVlbkFycm93e1xuICAgIHBhZGRpbmctdG9wOiAzN3B4OyB3aWR0aDogMTAlO1xufVxuXG4ucGttSW1nRXZvbHV0aW9ue1xuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xufVxuXG4uZXZvbHV0aW9uVHh0e1xuICAgIG1hcmdpbi1sZWZ0OiAtNjBweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","PokemonEvolutionComponent","constructor","route","pokemonService","helperService","ngOnInit","getPokemonSpecie","getPokemonId","snapshot","paramMap","get","subscribe","response","getPokemonEvolution","getPokemonImg","Id","console","log","pokemonImg","id","pokemonId","pokemonNameEvolutionId","secondEvolutionSpecieId","firstEvolutionSpecieId","level","getEvolutionDetails","pokemonEvolution","currentSpecie","chain","species","name","evolves_to","forEach","lists","evols","stringExtract","secondEvolutionSpecie","firstEvolutionSpecie","pokemonEvolutionImg","noPossibleEvolution","items","evolution_details","details","evolutionLevel","min_level","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/components/pokemons/pokemon-evolution/pokemon-evolution.component.html","/Users/ionut/pokemon_app/src/app/components/pokemons/pokemon-evolution/pokemon-evolution.component.ts"],"sourcesContent":["\n<div *ngIf=\"noPossibleEvolution\">\n    \n    <!-- <div class=\"col-3\">\n        <div class=\"ml-2 \">\n\n        </div>\n    </div> -->\n    <div class=\"col-12 mt-2\">\n        <h5 class=\"text-left\"> {{noPossibleEvolution}} </h5>\n    </div>\n</div>\n<div  *ngIf=\"!noPossibleEvolution\">\n    <div class=\"row\">\n        <div class=\"ml-2\">\n            <img src=\"/assets/green-arrow.jpg\" class=\"imgWH greenArrow\"/>\n            <img src=\"{{pokemonImg}}\" class=\"imgWH pl-5 ml-5 pkmImgEvolution\"/>\n        </div>\n    </div>\n    <div class=\"row mt-2\">\n        <h5 class=\"text-left pl-0 col-10 evolutionTxt\"> evolves into {{evolves_to | titlecase}} at level {{evolutionLevel}}</h5>\n    </div>\n</div>\n<!-- <div class=\"row\" *ngIf=\"noPossibleEvolution\">\n    <div class=\"ml-2\">\n\n    </div>\n</div> -->\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { Pokemon, PokemonEvolution } from '../../../pokemon.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { PokemonCRUDService } from '../../../pokemon-crud.service';\nimport { Observable, Subject } from 'rxjs';\nimport { HelperService } from '../../../helper.service';\n\n@Component({\n  selector: 'app-pokemon-evolution',\n  templateUrl: './pokemon-evolution.component.html',\n  styleUrls: ['./pokemon-evolution.component.css']\n})\nexport class PokemonEvolutionComponent implements OnInit {\n\n  pokemonName!: string\n  pokemonEvolution!: PokemonEvolution;\n  pokemonImg!: string;\n  pokemonEvolutionImg!: string;\n  evolutionLevel!: \n  { evolves_to: \n    [ \n      { evolution_details: \n        [\n          {min_level:  number;}\n        ], \n        evolves_to: \n        [\n          {species: {name: string}} \n        ]\n      }\n    ], \n    species: {name: string} \n  };\n  evolves_to!: string | null;\n  pokemonNameEvolution!: string;\n  pokemonEvolutionId!: number;\n  evolutionSpecieId!: number;\n  currentSpecie!: string;\n  firstEvolutionSpecie!: string;\n  secondEvolutionSpecie!: string;\n  noPossibleEvolution!: string;\n\n\n  constructor(\n    private route: ActivatedRoute,\n    private pokemonService: PokemonCRUDService,\n    private helperService: HelperService\n  ) {}\n\n  ngOnInit(): void {\n\n      this.pokemonService.getPokemonSpecie(this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id')!)).subscribe(\n        response => {\n          this.getPokemonEvolution(response, this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id')!));\n        }\n      );\n  }\n\n  // getPokemonEvolutionId()\n  // {\n  //   var subject = new Subject<number>();\n  //   let pokemonEvolutionId: number;\n\n  //   this.pokemonService.getPokemonSpecie(this.helperService.getPokemonId(this.route.snapshot.paramMap.get('id')!)).subscribe(\n  //     response => {\n\n  //       pokemonEvolutionId = this.helperService.stringExtract(response.evolution_chain.url);\n  //       subject.next(pokemonEvolutionId);\n  //     }\n  //   );\n\n  //   return subject.asObservable();\n  // }\n\n  getPokemonImg(Id: number): any\n  {\n    console.log(Id);\n    return this.pokemonImg = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${Id}.png`;\n\n\n    // var subject = new Subject<string>();\n    // let pokemonNameEvolution: string;\n\n    // this.pokemonService.getPokemon(Id).subscribe(\n    //   response => {\n    //     pokemonNameEvolution = response.name;\n    //     subject.next(pokemonNameEvolution);\n    //     this.pokemonName = response.name;\n\n    //     for (const [k, v] of Object.entries(response.sprites)) {\n    //       if (k === 'front_default') {\n    //         return this.pokemonImg = v;\n    //       }\n    //     }\n    //   }\n    // );\n\n    // return subject.asObservable();\n  }\n\n  getPokemonEvolution(id: any, pokemonId: number): any\n  {\n    // var subject = new Subject<number>();\n    let pokemonNameEvolutionId: number;\n    let secondEvolutionSpecieId: number;\n    let firstEvolutionSpecieId: number;\n\n    let level = 1;\n    this.pokemonService.getEvolutionDetails(id)\n      .subscribe( (pokemonEvolution)  => {\n        this.currentSpecie = pokemonEvolution.chain.species.name;\n        // console.log(this.currentSpecie );\n\n        pokemonEvolution.chain.evolves_to.forEach( (lists: any) => {\n          lists.evolves_to.forEach( (evols: any) => { // second evolution\n            // console.log(evols );\n            pokemonNameEvolutionId = this.helperService.stringExtract(evols['species']['url']);\n            secondEvolutionSpecieId = pokemonNameEvolutionId;\n            this.secondEvolutionSpecie = evols['species']['name'];\n            // console.log(secondEvolutionSpecieId);\n          \n          });\n\n          // first evolution\n          pokemonNameEvolutionId = this.helperService.stringExtract(lists['species']['url']);\n          this.firstEvolutionSpecie = lists['species']['name'];\n          firstEvolutionSpecieId = pokemonNameEvolutionId;\n          // console.log(firstEvolutionSpecieId);\n        });\n\n        // console.log(this.firstEvolutionSpecie );\n        // console.log(this.secondEvolutionSpecie );\n        \n        if(pokemonId === firstEvolutionSpecieId) {\n          this.evolves_to = this.secondEvolutionSpecie;\n          this.pokemonEvolutionImg = this.getPokemonImg(secondEvolutionSpecieId);\n        }else if(pokemonId === secondEvolutionSpecieId){\n          this.evolves_to = null;\n          this.noPossibleEvolution = 'There is no evolution possible';\n        }\n        else{\n          this.evolves_to = this.firstEvolutionSpecie;\n          this.pokemonEvolutionImg = this.getPokemonImg(firstEvolutionSpecieId);\n        }\n\n        // this.evolves_to = pokemonEvolution.chain.evolves_to.species.name;\n\n\n        pokemonEvolution.chain.evolves_to.forEach( (items: {evolution_details: any, }) => {\n          // console.log(items.evolution_details);\n          items.evolution_details.forEach( (details: {min_level: any}) => {\n            // console.log(details.min_level);\n            this.evolutionLevel = details.min_level;\n          });\n      });\n     });\n\n    //  console.log(subject.asObservable());\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}