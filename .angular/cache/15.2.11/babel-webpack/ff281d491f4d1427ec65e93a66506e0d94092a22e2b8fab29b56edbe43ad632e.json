{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { POKEMONS_URL, POKEMON_DAMAGE_FIRST_CLASS_URL, POKEMON_DAMAGE_SECOND_CLASS_URL, POKEMON_DAMAGE_THIRD_CLASS_URL, POKEMON_EVOLUTIONS_URL, POKEMON_IMG_URL, POKEMON_SPECIES_URL, POKEMON_TYPE_URL, POKEMON_URL } from '../constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"@angular/router\";\nexport class PokemonCRUDService {\n  constructor(http, messageService, route) {\n    this.http = http;\n    this.messageService = messageService;\n    this.route = route;\n    // private pokemonsCount!: Pokemons;\n    // private pokemonImg: any;\n    // private results: { pokemonsTotal: any }[] = [];\n    // private res!: number;\n    this.list = [];\n    // private pokemoTypes: { type: string; color: string }[] = [];\n    this.bb = [];\n    this.infodata = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getPokemons(pokemonsUrl) {\n    return this.http.get(pokemonsUrl);\n  }\n  getTotalNumberOfPokemons() {\n    let count = 0;\n    return this.http.get(POKEMON_URL).pipe(map(pokemonsCount => pokemonsCount['count']),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n    }), catchError(this.handleError('getTotalNumberOfPokemons', [])));\n  }\n  getSearchedPokemon(term) {\n    if (!term.trim()) {\n      return;\n    }\n    this.http.get(`${POKEMON_URL}/${term}`).subscribe(response => {\n      if (response) {\n        window.location.href = window.location.origin + '/details/' + `${response.id}`;\n      }\n    }, catchError(this.handleError('getSearchedPokemon', [])));\n  }\n  getPokemonTypes() {\n    return this.http.get(POKEMON_TYPE_URL);\n  }\n  getPokemonImg(Id) {\n    let imgUrl = '';\n    let no = 0;\n    this.getTotalNumberOfPokemons().subscribe(response => {\n      no = response;\n      //console.log(response);\n    });\n\n    this.getPokemon(Id).subscribe(response => {\n      for (const [k, v] of Object.entries(response.sprites)) {\n        if (k === 'front_default') {\n          imgUrl = v;\n        }\n      }\n    }, catchError(this.handleError('getPokemonIdByName', [])));\n    return imgUrl;\n  }\n  getPokemonImage(pokemonUrl) {\n    if (!pokemonUrl) {\n      pokemonUrl = POKEMONS_URL;\n    }\n    this.getPokemons(pokemonUrl).forEach(item => {\n      this.previousButton = item.previous;\n      item.results.forEach(childrenEntry => {\n        this.list.push({\n          id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]),\n          name: childrenEntry.name,\n          url: childrenEntry.url,\n          sprites: POKEMON_IMG_URL + Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]) + '.png'\n        });\n      });\n    });\n    return this.list;\n  }\n  getPokemon(id) {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getPokemonLast(id) {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get(url).pipe(tap(x => {\n      this.pokemon.sprites.front_default;\n    }), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getPokemonIdByName(name) {\n    if (!name.trim()) {\n      return null;\n    }\n    this.http.get(`${POKEMON_URL}/${name}`).subscribe(response => {\n      for (const [k, v] of Object.entries(response)) {\n        if (v.name === name) {\n          window.location.href = `${POKEMON_URL}/${name}`;\n          return v.id;\n        }\n      }\n    }, catchError(this.handleError('getPokemonIdByName', [])));\n    return;\n  }\n  searchPokemons(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${POKEMON_URL}/${term}`).pipe(tap(x => {\n      for (const [k, v] of Object.entries(x)) {\n        if (v.name === term) {\n          window.location.href = POKEMON_URL + term;\n        }\n      }\n    }));\n  }\n  basicSearch(term) {\n    let results = this.http.get(`${POKEMON_URL}/?name=${term}`);\n    return results;\n  }\n  getPokemonColor() {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n    let types = [];\n    return this.http.get(POKEMON_TYPE_URL).pipe(map(data => {\n      // console.log(data.results);\n      data.results.forEach((itemsV, innerIdx) => {\n        // console.log(itemsV.name);\n        types.push({\n          name: itemsV.name,\n          color: colors[innerIdx]\n        });\n      });\n      return types;\n    }), catchError(this.handleError(`something went wrong`)));\n  }\n  getMovesForStatusDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_FIRST_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForPhysicalDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_SECOND_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getMovesForSpecialDamageClass() {\n    return this.http.get(POKEMON_DAMAGE_THIRD_CLASS_URL).pipe(tap(_ => this.log(`fetched moves for 1st damage class`)), catchError(this.handleError(`getMovesForStatusDamageClass`)));\n  }\n  getPokemonSpecie(id) {\n    const url = `${POKEMON_SPECIES_URL}/${id}`;\n    let pokemonEvolutionId;\n    return this.http.get(url).pipe(map(data => {\n      pokemonEvolutionId = Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n      return pokemonEvolutionId;\n    }), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  getEvolutionDetails(id) {\n    const url = `${POKEMON_EVOLUTIONS_URL}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched Pokemon evolution id=${id}`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  log(message) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n  static #_ = this.ɵfac = function PokemonCRUDService_Factory(t) {\n    return new (t || PokemonCRUDService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonCRUDService,\n    factory: PokemonCRUDService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","POKEMONS_URL","POKEMON_DAMAGE_FIRST_CLASS_URL","POKEMON_DAMAGE_SECOND_CLASS_URL","POKEMON_DAMAGE_THIRD_CLASS_URL","POKEMON_EVOLUTIONS_URL","POKEMON_IMG_URL","POKEMON_SPECIES_URL","POKEMON_TYPE_URL","POKEMON_URL","PokemonCRUDService","constructor","http","messageService","route","headers","getPokemons","pokemonsUrl","get","getTotalNumberOfPokemons","count","pipe","pokemonsCount","h","outcome","handleError","getSearchedPokemon","term","trim","subscribe","response","window","location","href","origin","id","getPokemonTypes","getPokemonImg","Id","imgUrl","no","getPokemon","k","v","Object","entries","sprites","getPokemonImage","pokemonUrl","forEach","item","previousButton","previous","results","childrenEntry","list","push","Number","url","split","length","name","_","log","getPokemonLast","x","pokemon","front_default","getPokemonIdByName","searchPokemons","basicSearch","getPokemonColor","colors","types","data","itemsV","innerIdx","color","getMovesForStatusDamageClass","getMovesForPhysicalDamageClass","getMovesForSpecialDamageClass","getPokemonSpecie","pokemonEvolutionId","evolution_chain","getEvolutionDetails","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["/Users/ionut/pokemon_app/src/app/service/pokemon-crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { Pokemon, PokemonDamage, PokemonEvolution, Pokemons } from '../model/pokemon.model';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { POKEMONS_URL, POKEMON_DAMAGE_FIRST_CLASS_URL, POKEMON_DAMAGE_SECOND_CLASS_URL, POKEMON_DAMAGE_THIRD_CLASS_URL, \n  POKEMON_EVOLUTIONS_URL, \n  POKEMON_IMG_URL, POKEMON_SPECIES_URL, POKEMON_TYPE_URL, POKEMON_URL } from '../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PokemonCRUDService {\n  \n  // private pokemonsCount!: Pokemons;\n  // private pokemonImg: any;\n  // private results: { pokemonsTotal: any }[] = [];\n  // private res!: number;\n  list: {\n   id: number, name: string; url: string, sprites: any \n}[] = [];\n  // private pokemoTypes: { type: string; color: string }[] = [];\n  bb: [] = [];\n  previousButton: any;\n  nextButton: any;\n  pokemon: Pokemon | undefined;\n  infodata: {sprites: string}[] = [];\n\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  back_default: any;\n\n\n  constructor(private http: HttpClient, private messageService: MessageService, private route: ActivatedRoute) { }\n\n  getPokemons(pokemonsUrl: string): Observable<Pokemon> {\n    return this.http.get<Pokemon>(pokemonsUrl);\n  }\n\n  getTotalNumberOfPokemons(): Observable<any> \n  {\n    let count = 0;\n    return this.http.get<Pokemons>(POKEMON_URL)\n      .pipe(\n        map(pokemonsCount => pokemonsCount['count']), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n        }),\n        catchError(this.handleError<Pokemon[]>('getTotalNumberOfPokemons', []))\n      );\n  }\n\n  getSearchedPokemon(term: string): void \n  {\n    if (!term.trim()) {\n      return;\n    }\n\n    this.http.get<Pokemon>(`${POKEMON_URL}/${term}`).subscribe(\n      response => {\n        \n        if(response){\n          window.location.href =  window.location.origin + '/details/' +  `${response.id}`;\n        }\n        \n      },\n      catchError(this.handleError<Pokemon[]>('getSearchedPokemon', []))\n    );\n  }\n\n  getPokemonTypes() {\n    return this.http.get<Pokemon>(POKEMON_TYPE_URL);\n  }\n\n  getPokemonImg(Id: number): any \n  {\n    let imgUrl = '';\n    let no = 0;\n\n    this.getTotalNumberOfPokemons().subscribe(\n      (response) => {\n        no = response;\n        //console.log(response);\n      }\n    )\n\n    this.getPokemon(Id).subscribe(\n      response => {\n        for (const [k, v] of Object.entries(response.sprites)) {\n          if (k === 'front_default') {\n            imgUrl = v;\n          }\n        }\n      },\n      catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n    );\n\n    return imgUrl;\n\n  }\n\n  getPokemonImage(pokemonUrl: string | null): any \n  {\n\n    if(!pokemonUrl){\n      pokemonUrl =  POKEMONS_URL;\n    }\n\n    this.getPokemons(pokemonUrl).forEach(item => {\n      this.previousButton = item.previous\n      item.results.forEach(childrenEntry => {\n        this.list.push(\n          {\n            id: Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]),\n            name: childrenEntry.name,\n            url: childrenEntry.url,\n            sprites: POKEMON_IMG_URL + \n              Number(childrenEntry.url.split('/')[childrenEntry.url.split('/').length - 2]) + \n              '.png'\n        });\n      });\n    });\n\n    return this.list;\n  }\n\n\n  getPokemon(id: number): Observable<Pokemon> \n  {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get<Pokemon>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon id=${id}`)),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n  getPokemonLast(id: number): Observable<Pokemon> \n  {\n    const url = `${POKEMON_URL}/${id}`;\n    return this.http.get<Pokemon>(url).pipe(\n      tap(x => {\n        this.pokemon.sprites.front_default;\n      }),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n\n  getPokemonIdByName(name: string): number | undefined | null \n  {\n    if (!name.trim()) {\n      return null;\n    }\n\n    this.http.get<Pokemon>(`${POKEMON_URL}/${name}`).subscribe(\n      response => {\n        for (const [k, v] of Object.entries(response)) {\n          if (v.name === name) {\n            window.location.href = `${POKEMON_URL}/${name}`;\n\n            return v.id;\n          }\n        }\n      },\n      catchError(this.handleError<Pokemon[]>('getPokemonIdByName', []))\n    );\n\n    return;\n  }\n\n  searchPokemons(term: string): Observable<Pokemon[]> \n  {\n\n    if (!term.trim()) {\n\n      return of([]);\n    }\n    return this.http.get<Pokemon[]>(`${POKEMON_URL}/${term}`).pipe(\n      tap(\n        (x) => {\n          for (const [k, v] of Object.entries(x)) {\n            if (v.name === term) {\n              window.location.href = POKEMON_URL + term;\n            }\n          }\n        }\n      ));\n  }\n\n  basicSearch(term: string): any {\n    let results = this.http.get<Pokemon>(`${POKEMON_URL}/?name=${term}`);\n    return results;\n  }\n\n  getPokemonColor(): any \n  {\n    let colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \n      'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n      'silver', 'teal', 'white', 'yellow', 'brown', 'magenta', 'kaki'];\n\n    let types: { name: string; color: string}[] = [];\n\n    return this.http.get(POKEMON_TYPE_URL).\n      pipe(\n        map((data: any) => {\n          // console.log(data.results);\n          data.results.forEach((itemsV: any, innerIdx: any) =>{\n            // console.log(itemsV.name);\n\n            types.push(\n                {\n                  name: itemsV.name,\n                  color: colors[innerIdx]\n                }\n            );            \n          });\n\n          return types;\n        }), catchError(this.handleError<Pokemon>(`something went wrong`))\n      )\n  }\n\n  getMovesForStatusDamageClass() : Observable<PokemonDamage> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_FIRST_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForPhysicalDamageClass() : Observable<PokemonDamage> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_SECOND_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getMovesForSpecialDamageClass() : Observable<any> {\n    return this.http.get<PokemonDamage>(POKEMON_DAMAGE_THIRD_CLASS_URL).pipe(\n      tap(_ => this.log(`fetched moves for 1st damage class`)),\n      catchError(this.handleError<PokemonDamage>(`getMovesForStatusDamageClass`))\n    );\n  }\n\n  getPokemonSpecie(id: number): Observable<any> {\n    const url = `${POKEMON_SPECIES_URL}/${id}`;\n    let pokemonEvolutionId: Number;\n    return this.http.get<any>(url)\n    .pipe(\n      map((data: any) => {\n        pokemonEvolutionId =  Number(data.evolution_chain.url.split('/')[data.evolution_chain.url.split('/').length - 2]);\n\n        return pokemonEvolutionId;\n      }),  catchError(this.handleError<any>(`getPokemon id=${id}`))\n    )\n  }\n\n  getEvolutionDetails(id: number): Observable<PokemonEvolution> {\n    const url = `${POKEMON_EVOLUTIONS_URL}/${id}`;\n    return this.http.get<PokemonEvolution>(url).pipe(\n      tap(_ => this.log(`fetched Pokemon evolution id=${id}`)),\n      catchError(this.handleError<PokemonEvolution>(`getPokemon id=${id}`))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    this.messageService.add(`PokemonService: ${message}`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}